{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n\n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Function to directly apply a move without chess.js's move validation\n  // This is a last resort for when chess.js is changing the user's move\n  function directMove(sourceSquare, targetSquare) {\n    console.log(\"Attempting direct move from\", sourceSquare, \"to\", targetSquare);\n\n    // Create a new game state\n    const gameCopy = new Chess(game.fen());\n\n    // Get the piece at the source square\n    const piece = gameCopy.get(sourceSquare);\n    if (!piece) {\n      console.error(\"No piece at source square:\", sourceSquare);\n      return false;\n    }\n\n    // Check if the target square is a legal destination\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    console.log(\"All legal moves from\", sourceSquare, \":\", legalMoves);\n\n    // Find the exact legal move that matches our source and target\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    console.log(\"Found matching legal move:\", legalMove);\n\n    // Use the legal move object directly, which preserves the exact move\n    try {\n      // Important: Use the exact move object without any modifications\n      // This preserves all move properties including piece type, flags, etc.\n      const result = gameCopy.move({\n        from: legalMove.from,\n        to: legalMove.to,\n        promotion: legalMove.promotion // Include promotion only if it exists in the legal move\n      });\n      if (!result) {\n        console.error(\"Failed to apply legal move:\", legalMove);\n\n        // Last resort: try using the SAN notation directly\n        const sanResult = gameCopy.move(legalMove.san);\n        if (!sanResult) {\n          console.error(\"Failed to apply move using SAN notation:\", legalMove.san);\n          return false;\n        }\n        console.log(\"Move applied using SAN notation:\", sanResult);\n      } else {\n        console.log(\"Direct move successfully applied:\", result);\n      }\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n\n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n\n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making direct move:\", error);\n      return false;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n\n    // Show all legal moves from the source square for debugging\n    const legalMoves = showLegalMoves(sourceSquare);\n\n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    console.log(`Is ${targetSquare} a legal target from ${sourceSquare}?`, isLegalTarget);\n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n\n    // Try the direct move approach first, which preserves the exact move\n    return directMove(sourceSquare, targetSquare);\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n\n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Create a new game state\n      const gameCopy = new Chess(game.fen());\n\n      // Get all legal moves from the source square\n      const legalMoves = gameCopy.moves({\n        square: data.move.from,\n        verbose: true\n      });\n      console.log(\"Legal moves from AI source square:\", legalMoves);\n\n      // Find the exact legal move that matches the AI's move\n      const legalMove = legalMoves.find(move => move.to === data.move.to);\n      if (legalMove) {\n        console.log(\"Found matching legal move for AI:\", legalMove);\n\n        // Apply the move using the exact legal move object\n        const result = gameCopy.move({\n          from: legalMove.from,\n          to: legalMove.to,\n          promotion: data.move.promotion || legalMove.promotion // Use AI's promotion choice if provided\n        });\n        if (result) {\n          console.log(\"AI move successfully applied:\", result);\n\n          // Update the game state with the successful move\n          setGame(gameCopy);\n\n          // Update move history\n          setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n\n          // Check if game is over after AI move\n          if (gameCopy.isGameOver()) {\n            handleGameOver();\n          }\n          return;\n        }\n      }\n\n      // If we couldn't find or apply the exact legal move, try fallback methods\n      console.error(\"Could not find or apply exact legal move for AI\");\n\n      // Try using the move object directly\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to\n      };\n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n      }\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n\n        // Try to find a legal move as fallback\n        if (legalMoves.length > 0) {\n          // Use the first legal move from the source square if available\n          const fallbackMove = legalMoves[0];\n          console.log(\"Making fallback move instead:\", fallbackMove);\n          const fallbackResult = gameCopy.move(fallbackMove);\n          if (fallbackResult) {\n            console.log(\"Fallback move applied:\", fallbackResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n            return;\n          }\n        }\n\n        // If we still can't make a move, try a random legal move\n        const allLegalMoves = game.moves({\n          verbose: true\n        });\n        if (allLegalMoves.length > 0) {\n          const randomMove = allLegalMoves[Math.floor(Math.random() * allLegalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const randomResult = gameCopy.move(randomMove);\n          if (randomResult) {\n            console.log(\"Random move applied:\", randomResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n          }\n        }\n        return;\n      }\n      console.log(\"AI move applied using move object:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n\n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const gameCopy = new Chess(game.fen());\n        const legalMoves = gameCopy.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n\n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n\n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n        // Only allow selecting pieces of the player's color when it's their turn\n        if (pieceColor === playerColor && currentTurn === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n\n          // Show legal moves for debugging\n          showLegalMoves(square);\n        } else {\n          console.log(\"Cannot select this piece - wrong color or not your turn\");\n        }\n      } else {\n        console.log(\"No piece on this square to select\");\n      }\n      return;\n    }\n\n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      console.log(`Attempting to move from ${selectedSquare} to ${square}`);\n\n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      if (!isLegalTarget) {\n        console.log(`${square} is not a legal target from ${selectedSquare}`);\n\n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            console.log(\"Selected new square:\", square);\n            return;\n          }\n        }\n\n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        return false;\n      }\n\n      // Try to make the move\n      const result = onDrop(selectedSquare, square);\n      setSelectedSquare(null); // Clear selection regardless of move success\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square\n  function getCustomSquareStyles() {\n    if (!selectedSquare) return {};\n    return {\n      [selectedSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      }\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        },\n        arePiecesDraggable: true,\n        animationDuration: 200,\n        isDraggablePiece: isDraggablePiece,\n        onSquareClick: onSquareClick,\n        customSquareStyles: getCustomSquareStyles()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"McJZgrECLzg8KuoQrG2JtHqkyq0=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","selectedSquare","setSelectedSquare","showLegalMoves","sourceSquare","legalMoves","moves","square","verbose","console","log","directMove","targetSquare","gameCopy","fen","piece","get","error","legalMove","find","move","to","result","from","promotion","sanResult","san","history","pop","isGameOver","handleGameOver","setTimeout","makeAIMove","onDrop","currentTurn","turn","isLegalTarget","some","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","moveObj","length","fallbackMove","fallbackResult","allLegalMoves","randomMove","Math","floor","random","randomResult","fallbackError","isCheckmate","saveGameData","pgn","resetGame","flipBoard","newOrientation","newGame","onSquareClick","pieceColor","color","isDraggablePiece","charAt","toLowerCase","getCustomSquareStyles","backgroundColor","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","arePiecesDraggable","animationDuration","customSquareStyles","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    \n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Function to directly apply a move without chess.js's move validation\n  // This is a last resort for when chess.js is changing the user's move\n  function directMove(sourceSquare, targetSquare) {\n    console.log(\"Attempting direct move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Create a new game state\n    const gameCopy = new Chess(game.fen());\n    \n    // Get the piece at the source square\n    const piece = gameCopy.get(sourceSquare);\n    if (!piece) {\n      console.error(\"No piece at source square:\", sourceSquare);\n      return false;\n    }\n    \n    // Check if the target square is a legal destination\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    console.log(\"All legal moves from\", sourceSquare, \":\", legalMoves);\n    \n    // Find the exact legal move that matches our source and target\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    console.log(\"Found matching legal move:\", legalMove);\n    \n    // Use the legal move object directly, which preserves the exact move\n    try {\n      // Important: Use the exact move object without any modifications\n      // This preserves all move properties including piece type, flags, etc.\n      const result = gameCopy.move({\n        from: legalMove.from,\n        to: legalMove.to,\n        promotion: legalMove.promotion // Include promotion only if it exists in the legal move\n      });\n      \n      if (!result) {\n        console.error(\"Failed to apply legal move:\", legalMove);\n        \n        // Last resort: try using the SAN notation directly\n        const sanResult = gameCopy.move(legalMove.san);\n        if (!sanResult) {\n          console.error(\"Failed to apply move using SAN notation:\", legalMove.san);\n          return false;\n        }\n        \n        console.log(\"Move applied using SAN notation:\", sanResult);\n      } else {\n        console.log(\"Direct move successfully applied:\", result);\n      }\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n      \n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n      \n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making direct move:\", error);\n      return false;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Show all legal moves from the source square for debugging\n    const legalMoves = showLegalMoves(sourceSquare);\n    \n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    console.log(`Is ${targetSquare} a legal target from ${sourceSquare}?`, isLegalTarget);\n    \n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    // Try the direct move approach first, which preserves the exact move\n    return directMove(sourceSquare, targetSquare);\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Create a new game state\n      const gameCopy = new Chess(game.fen());\n      \n      // Get all legal moves from the source square\n      const legalMoves = gameCopy.moves({\n        square: data.move.from,\n        verbose: true\n      });\n      \n      console.log(\"Legal moves from AI source square:\", legalMoves);\n      \n      // Find the exact legal move that matches the AI's move\n      const legalMove = legalMoves.find(move => move.to === data.move.to);\n      \n      if (legalMove) {\n        console.log(\"Found matching legal move for AI:\", legalMove);\n        \n        // Apply the move using the exact legal move object\n        const result = gameCopy.move({\n          from: legalMove.from,\n          to: legalMove.to,\n          promotion: data.move.promotion || legalMove.promotion // Use AI's promotion choice if provided\n        });\n        \n        if (result) {\n          console.log(\"AI move successfully applied:\", result);\n          \n          // Update the game state with the successful move\n          setGame(gameCopy);\n          \n          // Update move history\n          setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n          \n          // Check if game is over after AI move\n          if (gameCopy.isGameOver()) {\n            handleGameOver();\n          }\n          \n          return;\n        }\n      }\n      \n      // If we couldn't find or apply the exact legal move, try fallback methods\n      console.error(\"Could not find or apply exact legal move for AI\");\n      \n      // Try using the move object directly\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to\n      };\n      \n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n      }\n      \n      const result = gameCopy.move(moveObj);\n      \n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n        \n        // Try to find a legal move as fallback\n        if (legalMoves.length > 0) {\n          // Use the first legal move from the source square if available\n          const fallbackMove = legalMoves[0];\n          console.log(\"Making fallback move instead:\", fallbackMove);\n          \n          const fallbackResult = gameCopy.move(fallbackMove);\n          if (fallbackResult) {\n            console.log(\"Fallback move applied:\", fallbackResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n            \n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n            return;\n          }\n        }\n        \n        // If we still can't make a move, try a random legal move\n        const allLegalMoves = game.moves({ verbose: true });\n        if (allLegalMoves.length > 0) {\n          const randomMove = allLegalMoves[Math.floor(Math.random() * allLegalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const randomResult = gameCopy.move(randomMove);\n          if (randomResult) {\n            console.log(\"Random move applied:\", randomResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n            \n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n          }\n        }\n        return;\n      }\n      \n      console.log(\"AI move applied using move object:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n      \n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const gameCopy = new Chess(game.fen());\n        const legalMoves = gameCopy.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, gameCopy.history().pop()]);\n            \n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n    \n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    \n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n        \n        // Only allow selecting pieces of the player's color when it's their turn\n        if (pieceColor === playerColor && currentTurn === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n          \n          // Show legal moves for debugging\n          showLegalMoves(square);\n        } else {\n          console.log(\"Cannot select this piece - wrong color or not your turn\");\n        }\n      } else {\n        console.log(\"No piece on this square to select\");\n      }\n      return;\n    }\n    \n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      console.log(`Attempting to move from ${selectedSquare} to ${square}`);\n      \n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      \n      if (!isLegalTarget) {\n        console.log(`${square} is not a legal target from ${selectedSquare}`);\n        \n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            console.log(\"Selected new square:\", square);\n            return;\n          }\n        }\n        \n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        return false;\n      }\n      \n      // Try to make the move\n      const result = onDrop(selectedSquare, square);\n      setSelectedSquare(null); // Clear selection regardless of move success\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({ piece, sourceSquare }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square\n  function getCustomSquareStyles() {\n    if (!selectedSquare) return {};\n    \n    return {\n      [selectedSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      }\n    };\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n          arePiecesDraggable={true}\n          animationDuration={200}\n          isDraggablePiece={isDraggablePiece}\n          onSquareClick={onSquareClick}\n          customSquareStyles={getCustomSquareStyles()}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}