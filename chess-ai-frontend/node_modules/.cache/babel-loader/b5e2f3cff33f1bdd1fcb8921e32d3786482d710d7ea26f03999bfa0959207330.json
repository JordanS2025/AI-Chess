{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n\n    // Create a move string in the format that chess.js will understand exactly\n    // This uses the long algebraic notation (e.g., \"e2e4\") which is less ambiguous\n    const moveString = `${sourceSquare}${targetSquare}`;\n\n    // Check if this is a pawn promotion move\n    const piece = game.get(sourceSquare);\n    if (piece && piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b')) {\n      // Add promotion to queen for pawn moves to the last rank\n      // Using long algebraic notation with promotion (e.g., \"e7e8q\")\n      console.log(\"This is a promotion move\");\n    }\n\n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      // Use the sloppy option to allow long algebraic notation\n      // This ensures the exact move specified by the user is used\n      let result;\n      if (piece && piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b')) {\n        // For promotion moves\n        result = gameCopy.move(`${moveString}q`, {\n          sloppy: true\n        });\n      } else {\n        // For regular moves\n        result = gameCopy.move(moveString, {\n          sloppy: true\n        });\n      }\n      if (!result) {\n        console.error(\"Invalid move:\", moveString);\n\n        // Try the standard object format as a fallback\n        const moveObj = {\n          from: sourceSquare,\n          to: targetSquare\n        };\n        if (piece && piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b')) {\n          moveObj.promotion = 'q';\n        }\n        result = gameCopy.move(moveObj);\n        if (!result) {\n          console.error(\"Move still invalid with object notation:\", moveObj);\n          return false;\n        }\n      }\n      console.log(\"Move successfully applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n\n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n\n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n\n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Create the move object with exactly what the AI returned\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to\n      };\n\n      // Only include promotion if it's specified by the AI\n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n        console.log(\"AI move includes promotion to:\", data.move.promotion);\n      }\n\n      // Try to make the move directly\n      const gameCopy = new Chess(game.fen());\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n\n        // Try to find a legal move as fallback\n        const legalMoves = game.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const fallbackResult = gameCopy.move(randomMove);\n          if (fallbackResult) {\n            console.log(\"Fallback move applied:\", fallbackResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, fallbackResult.san]);\n          }\n        }\n        return;\n      }\n      console.log(\"AI move successfully applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n\n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const gameCopy = new Chess(game.fen());\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, result.san]);\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n\n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n\n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n        }\n      }\n      return;\n    }\n\n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      const result = onDrop(selectedSquare, square);\n      setSelectedSquare(null); // Clear selection regardless of move success\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square\n  function getCustomSquareStyles() {\n    if (!selectedSquare) return {};\n    return {\n      [selectedSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      }\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        },\n        arePiecesDraggable: true,\n        animationDuration: 200,\n        isDraggablePiece: isDraggablePiece,\n        onSquareClick: onSquareClick,\n        customSquareStyles: getCustomSquareStyles()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"McJZgrECLzg8KuoQrG2JtHqkyq0=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","selectedSquare","setSelectedSquare","onDrop","sourceSquare","targetSquare","currentTurn","turn","console","log","moveString","piece","get","type","charAt","color","gameCopy","fen","result","move","sloppy","error","moveObj","from","to","promotion","san","isGameOver","handleGameOver","setTimeout","makeAIMove","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","legalMoves","moves","verbose","length","randomMove","Math","floor","random","fallbackResult","fallbackError","isCheckmate","saveGameData","pgn","history","resetGame","flipBoard","newOrientation","newGame","onSquareClick","square","pieceColor","isDraggablePiece","toLowerCase","getCustomSquareStyles","backgroundColor","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","arePiecesDraggable","animationDuration","customSquareStyles","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Create a move string in the format that chess.js will understand exactly\n    // This uses the long algebraic notation (e.g., \"e2e4\") which is less ambiguous\n    const moveString = `${sourceSquare}${targetSquare}`;\n    \n    // Check if this is a pawn promotion move\n    const piece = game.get(sourceSquare);\n    if (piece && piece.type === 'p' && \n        ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n         (targetSquare.charAt(1) === '1' && piece.color === 'b'))) {\n      // Add promotion to queen for pawn moves to the last rank\n      // Using long algebraic notation with promotion (e.g., \"e7e8q\")\n      console.log(\"This is a promotion move\");\n    }\n    \n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      // Use the sloppy option to allow long algebraic notation\n      // This ensures the exact move specified by the user is used\n      let result;\n      \n      if (piece && piece.type === 'p' && \n          ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n           (targetSquare.charAt(1) === '1' && piece.color === 'b'))) {\n        // For promotion moves\n        result = gameCopy.move(`${moveString}q`, { sloppy: true });\n      } else {\n        // For regular moves\n        result = gameCopy.move(moveString, { sloppy: true });\n      }\n      \n      if (!result) {\n        console.error(\"Invalid move:\", moveString);\n        \n        // Try the standard object format as a fallback\n        const moveObj = {\n          from: sourceSquare,\n          to: targetSquare,\n        };\n        \n        if (piece && piece.type === 'p' && \n            ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n             (targetSquare.charAt(1) === '1' && piece.color === 'b'))) {\n          moveObj.promotion = 'q';\n        }\n        \n        result = gameCopy.move(moveObj);\n        \n        if (!result) {\n          console.error(\"Move still invalid with object notation:\", moveObj);\n          return false;\n        }\n      }\n      \n      console.log(\"Move successfully applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      \n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n      \n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Create the move object with exactly what the AI returned\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to,\n      };\n      \n      // Only include promotion if it's specified by the AI\n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n        console.log(\"AI move includes promotion to:\", data.move.promotion);\n      }\n      \n      // Try to make the move directly\n      const gameCopy = new Chess(game.fen());\n      const result = gameCopy.move(moveObj);\n      \n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n        \n        // Try to find a legal move as fallback\n        const legalMoves = game.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const fallbackResult = gameCopy.move(randomMove);\n          if (fallbackResult) {\n            console.log(\"Fallback move applied:\", fallbackResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, fallbackResult.san]);\n          }\n        }\n        return;\n      }\n      \n      console.log(\"AI move successfully applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      \n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const gameCopy = new Chess(game.fen());\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, result.san]);\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n    \n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    \n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n        }\n      }\n      return;\n    }\n    \n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      const result = onDrop(selectedSquare, square);\n      setSelectedSquare(null); // Clear selection regardless of move success\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({ piece, sourceSquare }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square\n  function getCustomSquareStyles() {\n    if (!selectedSquare) return {};\n    \n    return {\n      [selectedSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      }\n    };\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n          arePiecesDraggable={true}\n          animationDuration={200}\n          isDraggablePiece={isDraggablePiece}\n          onSquareClick={onSquareClick}\n          customSquareStyles={getCustomSquareStyles()}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}