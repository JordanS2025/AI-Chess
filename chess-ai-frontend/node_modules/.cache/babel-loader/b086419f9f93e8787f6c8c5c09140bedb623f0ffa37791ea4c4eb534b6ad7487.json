{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white');\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n  // Use a ref to track the current game state for async operations\n  const gameRef = useRef(new Chess());\n  // Add promotion modal state\n  const [promotionModalVisible, setPromotionModalVisible] = useState(false);\n  const [pendingPromotion, setPendingPromotion] = useState(null);\n\n  // Update the ref whenever game state changes\n  useEffect(() => {\n    gameRef.current = new Chess(game.fen());\n  }, [game]);\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Make AI move - wrapped in useCallback to fix dependency warning\n  const makeAIMove = useCallback(async () => {\n    if (isAIThinking) {\n      console.log(\"AI is already thinking, skipping move request\");\n      return;\n    }\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    try {\n      // Use the gameRef to get the current state\n      const currentFEN = gameRef.current.fen();\n      console.log(\"Current FEN for AI move:\", currentFEN);\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: currentFEN\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Use the gameRef to make the AI move\n      const gameCopy = new Chess(currentFEN);\n      try {\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to,\n          promotion: data.move.promotion || 'q' // Default to queen for AI promotion\n        };\n        console.log(\"AI move being applied:\", moveObj);\n        const result = gameCopy.move(moveObj);\n        if (!result) {\n          throw new Error(\"Failed to apply AI move: \" + JSON.stringify(moveObj));\n        }\n        console.log(\"AI move successfully applied:\", result);\n        console.log(\"New board position:\", gameCopy.fen());\n\n        // Update the game state and ref\n        setGame(gameCopy);\n        gameRef.current = gameCopy;\n        setMoveHistory(prev => [...prev, result.san]);\n        if (gameCopy.isGameOver()) {\n          handleGameOver(gameCopy);\n        }\n      } catch (moveError) {\n        console.error(\"Error applying AI move:\", moveError);\n      }\n    } catch (error) {\n      console.error(\"Error during AI move:\", error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }, [isAIThinking]);\n  function makePlayerMove(sourceSquare, targetSquare, promotionPiece = null) {\n    console.log(\"Attempting player move from\", sourceSquare, \"to\", targetSquare);\n    const gameCopy = new Chess(gameRef.current.fen());\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n\n    // Check if this is a pawn promotion move\n    const isPromotion = isPromotionMove(sourceSquare, targetSquare, gameCopy);\n\n    // If it's a promotion and no promotion piece is specified, show the promotion modal\n    if (isPromotion && !promotionPiece) {\n      setPendingPromotion({\n        from: sourceSquare,\n        to: targetSquare\n      });\n      setPromotionModalVisible(true);\n      return true; // The move will be completed after promotion selection\n    }\n    try {\n      console.log(\"Move being applied:\", legalMove);\n      const result = gameCopy.move({\n        from: legalMove.from,\n        to: legalMove.to,\n        promotion: promotionPiece || legalMove.promotion\n      });\n      if (!result) {\n        console.error(\"Failed to apply legal move:\", legalMove);\n        return false;\n      }\n      console.log(\"Player move successfully applied:\", result);\n      console.log(\"New board position:\", gameCopy.fen());\n\n      // Update both state and ref\n      setGame(gameCopy);\n      gameRef.current = gameCopy;\n      setMoveHistory(prev => [...prev, result.san]);\n      if (gameCopy.isGameOver()) {\n        handleGameOver(gameCopy);\n        return true;\n      }\n\n      // Now make the AI move\n      setTimeout(() => {\n        makeAIMove();\n      }, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making player move:\", error);\n      return false;\n    }\n  }\n\n  // Helper function to determine if a move is a pawn promotion\n  function isPromotionMove(sourceSquare, targetSquare, gameState) {\n    const piece = gameState.get(sourceSquare);\n\n    // Check if it's a pawn\n    if (!piece || piece.type !== 'p') return false;\n\n    // Check if it's moving to the last rank\n    const targetRank = targetSquare.charAt(1);\n    return piece.color === 'w' && targetRank === '8' || piece.color === 'b' && targetRank === '1';\n  }\n\n  // Handle promotion selection\n  function handlePromotionSelect(promotionPiece) {\n    setPromotionModalVisible(false);\n    if (!pendingPromotion) {\n      console.error(\"No pending promotion found\");\n      return;\n    }\n\n    // Complete the move with the selected promotion piece\n    makePlayerMove(pendingPromotion.from, pendingPromotion.to, promotionPiece);\n    setPendingPromotion(null);\n  }\n  function onDrop(sourceSquare, targetSquare) {\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    const legalMoves = showLegalMoves(sourceSquare);\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    return makePlayerMove(sourceSquare, targetSquare);\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    if (!isAIThinking) {\n      const timeoutId = setTimeout(() => {\n        const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n        if (currentTurn !== playerColor && !gameRef.current.isGameOver()) {\n          makeAIMove();\n        }\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [game, playerColor, isAIThinking, makeAIMove]);\n  function handleGameOver(currentGame) {\n    const gameToUse = currentGame || game;\n    let result = 'draw';\n    if (gameToUse.isCheckmate()) {\n      result = gameToUse.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n    saveGameData(result, gameToUse);\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: gameToUse.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n  async function saveGameData(result, currentGame) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: currentGame.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n  function resetGame() {\n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n    if (!selectedSquare) {\n      const piece = gameRef.current.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          const legalMoves = showLegalMoves(square);\n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n          setLegalMoveSquares(legalSquares);\n        }\n      }\n      return;\n    }\n    if (selectedSquare) {\n      if (selectedSquare === square) {\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      if (!isLegalTarget) {\n        const piece = gameRef.current.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n      const result = makePlayerMove(selectedSquare, square);\n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      return result;\n    }\n  }\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n  function getCustomSquareStyles() {\n    const combinedStyles = {\n      ...legalMoveSquares\n    };\n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      };\n    }\n    return combinedStyles;\n  }\n\n  // Render the promotion selection modal\n  const PromotionModal = () => {\n    if (!promotionModalVisible) return null;\n    const promotionPieces = ['q', 'r', 'n', 'b']; // Queen, Rook, Knight, Bishop\n    const pieceColor = gameRef.current.turn();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"promotion-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Choose Promotion Piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"promotion-pieces\",\n          children: promotionPieces.map(piece => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"promotion-piece-button\",\n            onClick: () => handlePromotionSelect(piece),\n            children: [piece === 'q' && (pieceColor === 'w' ? '♕' : '♛'), piece === 'r' && (pieceColor === 'w' ? '♖' : '♜'), piece === 'n' && (pieceColor === 'w' ? '♘' : '♞'), piece === 'b' && (pieceColor === 'w' ? '♗' : '♝')]\n          }, piece, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n        id: \"chess-board\",\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        onSquareClick: onSquareClick,\n        boardOrientation: boardOrientation,\n        isDraggablePiece: isDraggablePiece,\n        customSquareStyles: getCustomSquareStyles()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thinking-indicator\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(PromotionModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: \"Flip Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"lIOH8PCFVsQrTEaW/rpFmowoIEg=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","selectedSquare","setSelectedSquare","legalMoveSquares","setLegalMoveSquares","gameRef","promotionModalVisible","setPromotionModalVisible","pendingPromotion","setPendingPromotion","current","fen","showLegalMoves","sourceSquare","legalMoves","moves","square","verbose","console","log","makeAIMove","currentFEN","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","move","from","to","gameCopy","moveObj","promotion","result","prev","san","isGameOver","handleGameOver","moveError","error","makePlayerMove","targetSquare","promotionPiece","legalMove","find","isPromotion","isPromotionMove","setTimeout","gameState","piece","get","type","targetRank","charAt","color","handlePromotionSelect","onDrop","currentTurn","turn","isLegalTarget","some","timeoutId","clearTimeout","currentGame","gameToUse","isCheckmate","saveGameData","pgn","history","resetGame","newGame","flipBoard","newOrientation","onSquareClick","pieceColor","legalSquares","forEach","background","borderRadius","newLegalMoves","newLegalSquares","isDraggablePiece","toLowerCase","getCustomSquareStyles","combinedStyles","backgroundColor","PromotionModal","promotionPieces","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","id","position","onPieceDrop","customSquareStyles","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white');\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n  // Use a ref to track the current game state for async operations\n  const gameRef = useRef(new Chess());\n  // Add promotion modal state\n  const [promotionModalVisible, setPromotionModalVisible] = useState(false);\n  const [pendingPromotion, setPendingPromotion] = useState(null);\n\n  // Update the ref whenever game state changes\n  useEffect(() => {\n    gameRef.current = new Chess(game.fen());\n  }, [game]);\n\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    \n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Make AI move - wrapped in useCallback to fix dependency warning\n  const makeAIMove = useCallback(async () => {\n    if (isAIThinking) {\n      console.log(\"AI is already thinking, skipping move request\");\n      return;\n    }\n\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    \n    try {\n      // Use the gameRef to get the current state\n      const currentFEN = gameRef.current.fen();\n      console.log(\"Current FEN for AI move:\", currentFEN);\n\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: currentFEN }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Use the gameRef to make the AI move\n      const gameCopy = new Chess(currentFEN);\n      \n      try {\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to,\n          promotion: data.move.promotion || 'q' // Default to queen for AI promotion\n        };\n        \n        console.log(\"AI move being applied:\", moveObj);\n        const result = gameCopy.move(moveObj);\n        \n        if (!result) {\n          throw new Error(\"Failed to apply AI move: \" + JSON.stringify(moveObj));\n        }\n        \n        console.log(\"AI move successfully applied:\", result);\n        console.log(\"New board position:\", gameCopy.fen());\n        \n        // Update the game state and ref\n        setGame(gameCopy);\n        gameRef.current = gameCopy;\n        \n        setMoveHistory(prev => [...prev, result.san]);\n        \n        if (gameCopy.isGameOver()) {\n          handleGameOver(gameCopy);\n        }\n      } catch (moveError) {\n        console.error(\"Error applying AI move:\", moveError);\n      }\n    } catch (error) {\n      console.error(\"Error during AI move:\", error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }, [isAIThinking]);\n\n  function makePlayerMove(sourceSquare, targetSquare, promotionPiece = null) {\n    console.log(\"Attempting player move from\", sourceSquare, \"to\", targetSquare);\n    \n    const gameCopy = new Chess(gameRef.current.fen());\n    \n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    // Check if this is a pawn promotion move\n    const isPromotion = isPromotionMove(sourceSquare, targetSquare, gameCopy);\n    \n    // If it's a promotion and no promotion piece is specified, show the promotion modal\n    if (isPromotion && !promotionPiece) {\n      setPendingPromotion({\n        from: sourceSquare,\n        to: targetSquare\n      });\n      setPromotionModalVisible(true);\n      return true; // The move will be completed after promotion selection\n    }\n    \n    try {\n      console.log(\"Move being applied:\", legalMove);\n      \n      const result = gameCopy.move({\n        from: legalMove.from,\n        to: legalMove.to,\n        promotion: promotionPiece || legalMove.promotion\n      });\n      \n      if (!result) {\n        console.error(\"Failed to apply legal move:\", legalMove);\n        return false;\n      }\n      \n      console.log(\"Player move successfully applied:\", result);\n      console.log(\"New board position:\", gameCopy.fen());\n      \n      // Update both state and ref\n      setGame(gameCopy);\n      gameRef.current = gameCopy;\n      \n      setMoveHistory(prev => [...prev, result.san]);\n      \n      if (gameCopy.isGameOver()) {\n        handleGameOver(gameCopy);\n        return true;\n      }\n      \n      // Now make the AI move\n      setTimeout(() => {\n        makeAIMove();\n      }, 300);\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error making player move:\", error);\n      return false;\n    }\n  }\n\n  // Helper function to determine if a move is a pawn promotion\n  function isPromotionMove(sourceSquare, targetSquare, gameState) {\n    const piece = gameState.get(sourceSquare);\n    \n    // Check if it's a pawn\n    if (!piece || piece.type !== 'p') return false;\n    \n    // Check if it's moving to the last rank\n    const targetRank = targetSquare.charAt(1);\n    return (piece.color === 'w' && targetRank === '8') || \n           (piece.color === 'b' && targetRank === '1');\n  }\n\n  // Handle promotion selection\n  function handlePromotionSelect(promotionPiece) {\n    setPromotionModalVisible(false);\n    \n    if (!pendingPromotion) {\n      console.error(\"No pending promotion found\");\n      return;\n    }\n    \n    // Complete the move with the selected promotion piece\n    makePlayerMove(pendingPromotion.from, pendingPromotion.to, promotionPiece);\n    setPendingPromotion(null);\n  }\n\n  function onDrop(sourceSquare, targetSquare) {\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    const legalMoves = showLegalMoves(sourceSquare);\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    \n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    return makePlayerMove(sourceSquare, targetSquare);\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    if (!isAIThinking) {\n      const timeoutId = setTimeout(() => {\n        const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n        \n        if (currentTurn !== playerColor && !gameRef.current.isGameOver()) {\n          makeAIMove();\n        }\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [game, playerColor, isAIThinking, makeAIMove]);\n\n  function handleGameOver(currentGame) {\n    const gameToUse = currentGame || game;\n    let result = 'draw';\n    if (gameToUse.isCheckmate()) {\n      result = gameToUse.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n    saveGameData(result, gameToUse);\n    \n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: gameToUse.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  async function saveGameData(result, currentGame) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: currentGame.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  function resetGame() {\n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    \n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    \n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    \n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n    \n    if (!selectedSquare) {\n      const piece = gameRef.current.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        \n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          \n          const legalMoves = showLegalMoves(square);\n          \n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n          \n          setLegalMoveSquares(legalSquares);\n        }\n      }\n      return;\n    }\n    \n    if (selectedSquare) {\n      if (selectedSquare === square) {\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n      \n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      \n      if (!isLegalTarget) {\n        const piece = gameRef.current.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            \n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            \n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n        \n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n      \n      const result = makePlayerMove(selectedSquare, square);\n      \n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      \n      return result;\n    }\n  }\n\n  function isDraggablePiece({ piece, sourceSquare }) {\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    \n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  function getCustomSquareStyles() {\n    const combinedStyles = { ...legalMoveSquares };\n    \n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      };\n    }\n    \n    return combinedStyles;\n  }\n\n  // Render the promotion selection modal\n  const PromotionModal = () => {\n    if (!promotionModalVisible) return null;\n    \n    const promotionPieces = ['q', 'r', 'n', 'b']; // Queen, Rook, Knight, Bishop\n    const pieceColor = gameRef.current.turn();\n    \n    return (\n      <div className=\"promotion-modal-overlay\">\n        <div className=\"promotion-modal\">\n          <h3>Choose Promotion Piece</h3>\n          <div className=\"promotion-pieces\">\n            {promotionPieces.map(piece => (\n              <button \n                key={piece} \n                className=\"promotion-piece-button\"\n                onClick={() => handlePromotionSelect(piece)}\n              >\n                {piece === 'q' && (pieceColor === 'w' ? '♕' : '♛')}\n                {piece === 'r' && (pieceColor === 'w' ? '♖' : '♜')}\n                {piece === 'n' && (pieceColor === 'w' ? '♘' : '♞')}\n                {piece === 'b' && (pieceColor === 'w' ? '♗' : '♝')}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"chess-board\">\n      <div className=\"board-container\">\n        <Chessboard\n          id=\"chess-board\"\n          position={game.fen()}\n          onPieceDrop={onDrop}\n          onSquareClick={onSquareClick}\n          boardOrientation={boardOrientation}\n          isDraggablePiece={isDraggablePiece}\n          customSquareStyles={getCustomSquareStyles()}\n        />\n        {isAIThinking && <div className=\"thinking-indicator\">AI is thinking...</div>}\n        <PromotionModal />\n      </div>\n      <div className=\"game-controls\">\n        <button onClick={resetGame}>Reset Game</button>\n        <button onClick={flipBoard}>Flip Board</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}