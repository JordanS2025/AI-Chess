{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n\n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Function to directly apply a move without chess.js's move validation\n  // This is to prevent chess.js from modifying the user's intended move\n  function directMove(sourceSquare, targetSquare) {\n    console.log(\"Attempting direct move from\", sourceSquare, \"to\", targetSquare);\n\n    // Create a new game state\n    const gameCopy = new Chess(game.fen());\n\n    // Get the piece at the source square\n    const piece = gameCopy.get(sourceSquare);\n    if (!piece) {\n      console.error(\"No piece at source square:\", sourceSquare);\n      return false;\n    }\n\n    // Get all legal moves for this specific piece and square\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n\n    // Find the EXACT matching move for the target square\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    try {\n      // Create the exact move object with promotion if needed\n      // For pawn promotion, default to queen if not specified\n      let promotion = undefined;\n\n      // Check if this is a pawn promotion move (pawn to last rank)\n      const isPawn = piece.type === 'p';\n      const isLastRank = piece.color === 'w' && targetSquare[1] === '8' || piece.color === 'b' && targetSquare[1] === '1';\n      if (isPawn && isLastRank) {\n        promotion = 'q'; // Default to queen\n        console.log(\"Pawn promotion detected, promoting to Queen\");\n      }\n\n      // Special handling for castling\n      const isCastling = piece.type === 'k' && Math.abs(sourceSquare.charCodeAt(0) - targetSquare.charCodeAt(0)) > 1;\n      if (isCastling) {\n        console.log(\"Castling move detected\");\n        // For castling, we'll use chess.js's built-in castling notation\n        // This ensures the rook also moves correctly\n        if (targetSquare[0] === 'g') {\n          // Kingside castle\n          const moveResult = gameCopy.move('O-O');\n          if (moveResult) {\n            setGame(gameCopy);\n            setMoveHistory(prev => [...prev, moveResult.san]);\n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            } else {\n              // AI makes a move after a short delay\n              setTimeout(makeAIMove, 300);\n            }\n            return true;\n          }\n        } else if (targetSquare[0] === 'c') {\n          // Queenside castle\n          const moveResult = gameCopy.move('O-O-O');\n          if (moveResult) {\n            setGame(gameCopy);\n            setMoveHistory(prev => [...prev, moveResult.san]);\n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            } else {\n              // AI makes a move after a short delay\n              setTimeout(makeAIMove, 300);\n            }\n            return true;\n          }\n        }\n      }\n\n      // For normal moves, use the exact move object\n      const moveObj = {\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: promotion\n      };\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"Failed to apply move:\", moveObj);\n        return false;\n      }\n      console.log(\"Move successfully applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory(prev => [...prev, result.san]);\n\n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n\n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n\n    // Show all legal moves from the source square for debugging\n    const legalMoves = showLegalMoves(sourceSquare);\n\n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    console.log(`Is ${targetSquare} a legal target from ${sourceSquare}?`, isLegalTarget);\n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n\n    // Try the direct move approach first, which preserves the exact move\n    return directMove(sourceSquare, targetSquare);\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n\n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Create a new game state\n      const gameCopy = new Chess(game.fen());\n\n      // Apply the AI move directly\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to,\n        promotion: data.move.promotion || undefined\n      };\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n        throw new Error(\"Invalid AI move\");\n      }\n      console.log(\"AI move applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory(prev => [...prev, result.san]);\n\n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, make a random legal move\n      try {\n        const gameCopy = new Chess(game.fen());\n        const legalMoves = gameCopy.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory(prev => [...prev, result.san]);\n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n\n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n\n    // Only allow interaction when it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n\n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n\n        // Only allow selecting pieces of the player's color\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n\n          // Get and show legal moves for the selected piece\n          const legalMoves = showLegalMoves(square);\n\n          // Create a map of legal target squares for highlighting\n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n\n          // Set the legal move squares for highlighting\n          setLegalMoveSquares(legalSquares);\n        } else {\n          console.log(\"Cannot select this piece - wrong color\");\n        }\n      } else {\n        console.log(\"No piece on this square to select\");\n      }\n      return;\n    }\n\n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      console.log(`Attempting to move from ${selectedSquare} to ${square}`);\n\n      // If clicking the same square, deselect it\n      if (selectedSquare === square) {\n        console.log(\"Deselecting square\");\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n\n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      if (!isLegalTarget) {\n        console.log(`${square} is not a legal target from ${selectedSquare}`);\n\n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            console.log(\"Selected new square:\", square);\n\n            // Update legal move highlights for the new selected piece\n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n\n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n\n      // Try to make the move\n      const result = directMove(selectedSquare, square);\n\n      // Clear selection and legal move highlights\n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square and legal moves\n  function getCustomSquareStyles() {\n    const combinedStyles = {\n      ...legalMoveSquares\n    };\n\n    // Add highlight for the selected square\n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      };\n    }\n    return combinedStyles;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        },\n        arePiecesDraggable: true,\n        animationDuration: 200,\n        isDraggablePiece: isDraggablePiece,\n        onSquareClick: onSquareClick,\n        customSquareStyles: getCustomSquareStyles()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 478,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"QBx28ynDmaskdJvk4rKRr6Td/g0=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","selectedSquare","setSelectedSquare","legalMoveSquares","setLegalMoveSquares","showLegalMoves","sourceSquare","legalMoves","moves","square","verbose","console","log","directMove","targetSquare","gameCopy","fen","piece","get","error","legalMove","find","move","to","promotion","undefined","isPawn","type","isLastRank","color","isCastling","Math","abs","charCodeAt","moveResult","prev","san","isGameOver","handleGameOver","setTimeout","makeAIMove","moveObj","from","result","onDrop","currentTurn","turn","isLegalTarget","some","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","length","randomMove","floor","random","fallbackError","isCheckmate","saveGameData","pgn","history","resetGame","flipBoard","newOrientation","newGame","onSquareClick","pieceColor","legalSquares","forEach","background","borderRadius","newLegalMoves","newLegalSquares","isDraggablePiece","charAt","toLowerCase","getCustomSquareStyles","combinedStyles","backgroundColor","className","children","position","onPieceDrop","customBoardStyle","boxShadow","arePiecesDraggable","animationDuration","customSquareStyles","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    \n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Function to directly apply a move without chess.js's move validation\n  // This is to prevent chess.js from modifying the user's intended move\n  function directMove(sourceSquare, targetSquare) {\n    console.log(\"Attempting direct move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Create a new game state\n    const gameCopy = new Chess(game.fen());\n    \n    // Get the piece at the source square\n    const piece = gameCopy.get(sourceSquare);\n    if (!piece) {\n      console.error(\"No piece at source square:\", sourceSquare);\n      return false;\n    }\n    \n    // Get all legal moves for this specific piece and square\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    // Find the EXACT matching move for the target square\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    try {\n      // Create the exact move object with promotion if needed\n      // For pawn promotion, default to queen if not specified\n      let promotion = undefined;\n      \n      // Check if this is a pawn promotion move (pawn to last rank)\n      const isPawn = piece.type === 'p';\n      const isLastRank = (piece.color === 'w' && targetSquare[1] === '8') || \n                        (piece.color === 'b' && targetSquare[1] === '1');\n      \n      if (isPawn && isLastRank) {\n        promotion = 'q'; // Default to queen\n        console.log(\"Pawn promotion detected, promoting to Queen\");\n      }\n      \n      // Special handling for castling\n      const isCastling = piece.type === 'k' && \n                        (Math.abs(sourceSquare.charCodeAt(0) - targetSquare.charCodeAt(0)) > 1);\n      \n      if (isCastling) {\n        console.log(\"Castling move detected\");\n        // For castling, we'll use chess.js's built-in castling notation\n        // This ensures the rook also moves correctly\n        if (targetSquare[0] === 'g') { // Kingside castle\n          const moveResult = gameCopy.move('O-O');\n          if (moveResult) {\n            setGame(gameCopy);\n            setMoveHistory(prev => [...prev, moveResult.san]);\n            \n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            } else {\n              // AI makes a move after a short delay\n              setTimeout(makeAIMove, 300);\n            }\n            return true;\n          }\n        } else if (targetSquare[0] === 'c') { // Queenside castle\n          const moveResult = gameCopy.move('O-O-O');\n          if (moveResult) {\n            setGame(gameCopy);\n            setMoveHistory(prev => [...prev, moveResult.san]);\n            \n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            } else {\n              // AI makes a move after a short delay\n              setTimeout(makeAIMove, 300);\n            }\n            return true;\n          }\n        }\n      }\n      \n      // For normal moves, use the exact move object\n      const moveObj = {\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: promotion\n      };\n      \n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"Failed to apply move:\", moveObj);\n        return false;\n      }\n      \n      console.log(\"Move successfully applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory(prev => [...prev, result.san]);\n      \n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n      \n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Show all legal moves from the source square for debugging\n    const legalMoves = showLegalMoves(sourceSquare);\n    \n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    console.log(`Is ${targetSquare} a legal target from ${sourceSquare}?`, isLegalTarget);\n    \n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    // Try the direct move approach first, which preserves the exact move\n    return directMove(sourceSquare, targetSquare);\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Create a new game state\n      const gameCopy = new Chess(game.fen());\n      \n      // Apply the AI move directly\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to,\n        promotion: data.move.promotion || undefined\n      };\n      \n      const result = gameCopy.move(moveObj);\n      \n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n        throw new Error(\"Invalid AI move\");\n      }\n      \n      console.log(\"AI move applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory(prev => [...prev, result.san]);\n      \n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n      \n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, make a random legal move\n      try {\n        const gameCopy = new Chess(game.fen());\n        const legalMoves = gameCopy.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory(prev => [...prev, result.san]);\n            \n            if (gameCopy.isGameOver()) {\n              handleGameOver();\n            }\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n    \n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    \n    // Only allow interaction when it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n    \n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        \n        // Only allow selecting pieces of the player's color\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n          \n          // Get and show legal moves for the selected piece\n          const legalMoves = showLegalMoves(square);\n          \n          // Create a map of legal target squares for highlighting\n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n          \n          // Set the legal move squares for highlighting\n          setLegalMoveSquares(legalSquares);\n        } else {\n          console.log(\"Cannot select this piece - wrong color\");\n        }\n      } else {\n        console.log(\"No piece on this square to select\");\n      }\n      return;\n    }\n    \n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      console.log(`Attempting to move from ${selectedSquare} to ${square}`);\n      \n      // If clicking the same square, deselect it\n      if (selectedSquare === square) {\n        console.log(\"Deselecting square\");\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n      \n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      \n      if (!isLegalTarget) {\n        console.log(`${square} is not a legal target from ${selectedSquare}`);\n        \n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            console.log(\"Selected new square:\", square);\n            \n            // Update legal move highlights for the new selected piece\n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            \n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n        \n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n      \n      // Try to make the move\n      const result = directMove(selectedSquare, square);\n      \n      // Clear selection and legal move highlights\n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      \n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({ piece, sourceSquare }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square and legal moves\n  function getCustomSquareStyles() {\n    const combinedStyles = { ...legalMoveSquares };\n    \n    // Add highlight for the selected square\n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      };\n    }\n    \n    return combinedStyles;\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n          arePiecesDraggable={true}\n          animationDuration={200}\n          isDraggablePiece={isDraggablePiece}\n          onSquareClick={onSquareClick}\n          customSquareStyles={getCustomSquareStyles()}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}