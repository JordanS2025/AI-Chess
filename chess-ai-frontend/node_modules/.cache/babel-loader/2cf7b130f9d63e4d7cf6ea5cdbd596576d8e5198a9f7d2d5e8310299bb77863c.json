{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n\n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n\n    // Show all legal moves from the source square for debugging\n    const legalMoves = showLegalMoves(sourceSquare);\n\n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    console.log(`Is ${targetSquare} a legal target from ${sourceSquare}?`, isLegalTarget);\n\n    // Create a move string in the format that chess.js will understand exactly\n    // This uses the long algebraic notation (e.g., \"e2e4\") which is less ambiguous\n    const moveString = `${sourceSquare}${targetSquare}`;\n\n    // Check if this is a pawn promotion move\n    const piece = game.get(sourceSquare);\n    if (piece && piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b')) {\n      // Add promotion to queen for pawn moves to the last rank\n      // Using long algebraic notation with promotion (e.g., \"e7e8q\")\n      console.log(\"This is a promotion move\");\n    }\n\n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      // Use the sloppy option to allow long algebraic notation\n      // This ensures the exact move specified by the user is used\n      let result;\n      if (piece && piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b')) {\n        // For promotion moves\n        result = gameCopy.move(`${moveString}q`, {\n          sloppy: true\n        });\n      } else {\n        // For regular moves\n        result = gameCopy.move(moveString, {\n          sloppy: true\n        });\n      }\n      if (!result) {\n        console.error(\"Invalid move:\", moveString);\n\n        // Try the standard object format as a fallback\n        const moveObj = {\n          from: sourceSquare,\n          to: targetSquare\n        };\n        if (piece && piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b')) {\n          moveObj.promotion = 'q';\n        }\n        result = gameCopy.move(moveObj);\n        if (!result) {\n          console.error(\"Move still invalid with object notation:\", moveObj);\n          return false;\n        }\n      }\n      console.log(\"Move successfully applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n\n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n\n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n\n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Create a move string in the format that chess.js will understand exactly\n      const moveString = `${data.move.from}${data.move.to}`;\n\n      // Try to make the move directly\n      const gameCopy = new Chess(game.fen());\n      let result;\n\n      // Check if this is a promotion move\n      if (data.move.promotion) {\n        // For promotion moves\n        result = gameCopy.move(`${moveString}${data.move.promotion}`, {\n          sloppy: true\n        });\n        console.log(\"AI promotion move:\", `${moveString}${data.move.promotion}`);\n      } else {\n        // For regular moves\n        result = gameCopy.move(moveString, {\n          sloppy: true\n        });\n      }\n      if (!result) {\n        console.error(\"AI move is invalid:\", moveString);\n\n        // Try the standard object format as a fallback\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to\n        };\n        if (data.move.promotion) {\n          moveObj.promotion = data.move.promotion;\n        }\n        result = gameCopy.move(moveObj);\n        if (!result) {\n          console.error(\"AI move still invalid with object notation:\", moveObj);\n\n          // Try to find a legal move as fallback\n          const legalMoves = game.moves({\n            verbose: true\n          });\n          if (legalMoves.length > 0) {\n            const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n            console.log(\"Making random move instead:\", randomMove);\n            const fallbackResult = gameCopy.move(randomMove);\n            if (fallbackResult) {\n              console.log(\"Fallback move applied:\", fallbackResult);\n              setGame(gameCopy);\n              setMoveHistory([...moveHistory, fallbackResult.san]);\n            }\n          }\n          return;\n        }\n      }\n      console.log(\"AI move successfully applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n\n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const gameCopy = new Chess(game.fen());\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, result.san]);\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n\n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n\n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n        // Only allow selecting pieces of the player's color when it's their turn\n        if (pieceColor === playerColor && currentTurn === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n\n          // Show legal moves for debugging\n          showLegalMoves(square);\n        } else {\n          console.log(\"Cannot select this piece - wrong color or not your turn\");\n        }\n      } else {\n        console.log(\"No piece on this square to select\");\n      }\n      return;\n    }\n\n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      console.log(`Attempting to move from ${selectedSquare} to ${square}`);\n\n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      if (!isLegalTarget) {\n        console.log(`${square} is not a legal target from ${selectedSquare}`);\n\n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            console.log(\"Selected new square:\", square);\n            return;\n          }\n        }\n\n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        return false;\n      }\n\n      // Try to make the move\n      const result = onDrop(selectedSquare, square);\n      setSelectedSquare(null); // Clear selection regardless of move success\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square\n  function getCustomSquareStyles() {\n    if (!selectedSquare) return {};\n    return {\n      [selectedSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      }\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        },\n        arePiecesDraggable: true,\n        animationDuration: 200,\n        isDraggablePiece: isDraggablePiece,\n        onSquareClick: onSquareClick,\n        customSquareStyles: getCustomSquareStyles()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 412,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"McJZgrECLzg8KuoQrG2JtHqkyq0=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","selectedSquare","setSelectedSquare","showLegalMoves","sourceSquare","legalMoves","moves","square","verbose","console","log","onDrop","targetSquare","currentTurn","turn","isLegalTarget","some","move","to","moveString","piece","get","type","charAt","color","gameCopy","fen","result","sloppy","error","moveObj","from","promotion","san","isGameOver","handleGameOver","setTimeout","makeAIMove","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","length","randomMove","Math","floor","random","fallbackResult","fallbackError","isCheckmate","saveGameData","pgn","history","resetGame","flipBoard","newOrientation","newGame","onSquareClick","pieceColor","isDraggablePiece","toLowerCase","getCustomSquareStyles","backgroundColor","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","arePiecesDraggable","animationDuration","customSquareStyles","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    \n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Show all legal moves from the source square for debugging\n    const legalMoves = showLegalMoves(sourceSquare);\n    \n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    console.log(`Is ${targetSquare} a legal target from ${sourceSquare}?`, isLegalTarget);\n    \n    // Create a move string in the format that chess.js will understand exactly\n    // This uses the long algebraic notation (e.g., \"e2e4\") which is less ambiguous\n    const moveString = `${sourceSquare}${targetSquare}`;\n    \n    // Check if this is a pawn promotion move\n    const piece = game.get(sourceSquare);\n    if (piece && piece.type === 'p' && \n        ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n         (targetSquare.charAt(1) === '1' && piece.color === 'b'))) {\n      // Add promotion to queen for pawn moves to the last rank\n      // Using long algebraic notation with promotion (e.g., \"e7e8q\")\n      console.log(\"This is a promotion move\");\n    }\n    \n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      // Use the sloppy option to allow long algebraic notation\n      // This ensures the exact move specified by the user is used\n      let result;\n      \n      if (piece && piece.type === 'p' && \n          ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n           (targetSquare.charAt(1) === '1' && piece.color === 'b'))) {\n        // For promotion moves\n        result = gameCopy.move(`${moveString}q`, { sloppy: true });\n      } else {\n        // For regular moves\n        result = gameCopy.move(moveString, { sloppy: true });\n      }\n      \n      if (!result) {\n        console.error(\"Invalid move:\", moveString);\n        \n        // Try the standard object format as a fallback\n        const moveObj = {\n          from: sourceSquare,\n          to: targetSquare,\n        };\n        \n        if (piece && piece.type === 'p' && \n            ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n             (targetSquare.charAt(1) === '1' && piece.color === 'b'))) {\n          moveObj.promotion = 'q';\n        }\n        \n        result = gameCopy.move(moveObj);\n        \n        if (!result) {\n          console.error(\"Move still invalid with object notation:\", moveObj);\n          return false;\n        }\n      }\n      \n      console.log(\"Move successfully applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      \n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n      \n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Create a move string in the format that chess.js will understand exactly\n      const moveString = `${data.move.from}${data.move.to}`;\n      \n      // Try to make the move directly\n      const gameCopy = new Chess(game.fen());\n      let result;\n      \n      // Check if this is a promotion move\n      if (data.move.promotion) {\n        // For promotion moves\n        result = gameCopy.move(`${moveString}${data.move.promotion}`, { sloppy: true });\n        console.log(\"AI promotion move:\", `${moveString}${data.move.promotion}`);\n      } else {\n        // For regular moves\n        result = gameCopy.move(moveString, { sloppy: true });\n      }\n      \n      if (!result) {\n        console.error(\"AI move is invalid:\", moveString);\n        \n        // Try the standard object format as a fallback\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to,\n        };\n        \n        if (data.move.promotion) {\n          moveObj.promotion = data.move.promotion;\n        }\n        \n        result = gameCopy.move(moveObj);\n        \n        if (!result) {\n          console.error(\"AI move still invalid with object notation:\", moveObj);\n          \n          // Try to find a legal move as fallback\n          const legalMoves = game.moves({ verbose: true });\n          if (legalMoves.length > 0) {\n            const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n            console.log(\"Making random move instead:\", randomMove);\n            \n            const fallbackResult = gameCopy.move(randomMove);\n            if (fallbackResult) {\n              console.log(\"Fallback move applied:\", fallbackResult);\n              setGame(gameCopy);\n              setMoveHistory([...moveHistory, fallbackResult.san]);\n            }\n          }\n          return;\n        }\n      }\n      \n      console.log(\"AI move successfully applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      \n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const gameCopy = new Chess(game.fen());\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, result.san]);\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n    \n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    \n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n        \n        // Only allow selecting pieces of the player's color when it's their turn\n        if (pieceColor === playerColor && currentTurn === playerColor) {\n          setSelectedSquare(square);\n          console.log(\"Selected square:\", square);\n          \n          // Show legal moves for debugging\n          showLegalMoves(square);\n        } else {\n          console.log(\"Cannot select this piece - wrong color or not your turn\");\n        }\n      } else {\n        console.log(\"No piece on this square to select\");\n      }\n      return;\n    }\n    \n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      console.log(`Attempting to move from ${selectedSquare} to ${square}`);\n      \n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      \n      if (!isLegalTarget) {\n        console.log(`${square} is not a legal target from ${selectedSquare}`);\n        \n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            console.log(\"Selected new square:\", square);\n            return;\n          }\n        }\n        \n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        return false;\n      }\n      \n      // Try to make the move\n      const result = onDrop(selectedSquare, square);\n      setSelectedSquare(null); // Clear selection regardless of move success\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({ piece, sourceSquare }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square\n  function getCustomSquareStyles() {\n    if (!selectedSquare) return {};\n    \n    return {\n      [selectedSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      }\n    };\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n          arePiecesDraggable={true}\n          animationDuration={200}\n          isDraggablePiece={isDraggablePiece}\n          onSquareClick={onSquareClick}\n          customSquareStyles={getCustomSquareStyles()}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}