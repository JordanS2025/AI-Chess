{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n\n  // Validate a move to ensure it's legal\n  function validateMove(moveObj) {\n    const tempGame = new Chess(game.fen());\n    try {\n      // Try to make the move in the temporary game\n      const result = tempGame.move(moveObj);\n      if (!result) {\n        console.error(\"Move validation failed - not a legal move:\", moveObj);\n        return null;\n      }\n      return result;\n    } catch (error) {\n      console.error(\"Move validation error:\", error, moveObj);\n      return null;\n    }\n  }\n\n  // Function to make a move\n  function makeMove(move) {\n    console.log(\"Making move:\", move);\n\n    // First validate the move\n    const validatedMove = validateMove(move);\n    if (!validatedMove) {\n      console.error(\"Invalid move detected:\", move);\n      return null;\n    }\n\n    // Now make the actual move\n    const gameCopy = new Chess(game.fen());\n    try {\n      // Use the validated move format\n      const result = gameCopy.move(validatedMove);\n      console.log(\"Move result:\", result);\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      return result;\n    } catch (error) {\n      console.error('Error applying move:', error);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n\n    // Get the piece that's being moved\n    const piece = game.get(sourceSquare);\n    if (!piece) {\n      console.error(\"No piece found at source square:\", sourceSquare);\n      return false;\n    }\n\n    // Check if this is a pawn promotion move\n    const isPromotion = piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b');\n\n    // Create the move object\n    const moveObj = {\n      from: sourceSquare,\n      to: targetSquare\n    };\n\n    // Only add promotion if it's actually a promotion move\n    if (isPromotion) {\n      moveObj.promotion = 'q'; // promote to queen\n      console.log(\"This is a promotion move\");\n    }\n\n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"Invalid move:\", moveObj);\n        return false;\n      }\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      console.log(\"User move applied:\", result);\n\n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n\n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n\n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Create the move object\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to\n      };\n\n      // Only include promotion if it's specified and not null\n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n        console.log(\"AI move includes promotion to:\", data.move.promotion);\n      }\n\n      // Validate the move\n      const validatedMove = validateMove(moveObj);\n      if (!validatedMove) {\n        console.error(\"AI move validation failed:\", moveObj);\n\n        // Try to find a legal move as fallback\n        const legalMoves = game.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          makeMove(randomMove);\n        }\n        return;\n      }\n\n      // Make the move using the validated move object\n      const result = makeMove(validatedMove);\n      if (!result) {\n        throw new Error(\"AI move failed to apply\");\n      }\n      console.log(\"AI move applied:\", result);\n\n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          makeMove(randomMove);\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"N6CiMXgNEF9icXh0np0dcMfX9Do=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","validateMove","moveObj","tempGame","fen","result","move","console","error","makeMove","log","validatedMove","gameCopy","san","onDrop","sourceSquare","targetSquare","currentTurn","turn","piece","get","isPromotion","type","charAt","color","from","to","promotion","isGameOver","handleGameOver","setTimeout","makeAIMove","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","legalMoves","moves","verbose","length","randomMove","Math","floor","random","fallbackError","isCheckmate","saveGameData","pgn","history","resetGame","flipBoard","newOrientation","newGame","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n\n  // Validate a move to ensure it's legal\n  function validateMove(moveObj) {\n    const tempGame = new Chess(game.fen());\n    \n    try {\n      // Try to make the move in the temporary game\n      const result = tempGame.move(moveObj);\n      \n      if (!result) {\n        console.error(\"Move validation failed - not a legal move:\", moveObj);\n        return null;\n      }\n      \n      return result;\n    } catch (error) {\n      console.error(\"Move validation error:\", error, moveObj);\n      return null;\n    }\n  }\n\n  // Function to make a move\n  function makeMove(move) {\n    console.log(\"Making move:\", move);\n    \n    // First validate the move\n    const validatedMove = validateMove(move);\n    if (!validatedMove) {\n      console.error(\"Invalid move detected:\", move);\n      return null;\n    }\n    \n    // Now make the actual move\n    const gameCopy = new Chess(game.fen());\n    \n    try {\n      // Use the validated move format\n      const result = gameCopy.move(validatedMove);\n      console.log(\"Move result:\", result);\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n\n      return result;\n    } catch (error) {\n      console.error('Error applying move:', error);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Get the piece that's being moved\n    const piece = game.get(sourceSquare);\n    if (!piece) {\n      console.error(\"No piece found at source square:\", sourceSquare);\n      return false;\n    }\n    \n    // Check if this is a pawn promotion move\n    const isPromotion = piece.type === 'p' && \n                       ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n                        (targetSquare.charAt(1) === '1' && piece.color === 'b'));\n    \n    // Create the move object\n    const moveObj = {\n      from: sourceSquare,\n      to: targetSquare,\n    };\n    \n    // Only add promotion if it's actually a promotion move\n    if (isPromotion) {\n      moveObj.promotion = 'q'; // promote to queen\n      console.log(\"This is a promotion move\");\n    }\n    \n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      const result = gameCopy.move(moveObj);\n      \n      if (!result) {\n        console.error(\"Invalid move:\", moveObj);\n        return false;\n      }\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      \n      console.log(\"User move applied:\", result);\n      \n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n      \n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Create the move object\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to,\n      };\n      \n      // Only include promotion if it's specified and not null\n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n        console.log(\"AI move includes promotion to:\", data.move.promotion);\n      }\n      \n      // Validate the move\n      const validatedMove = validateMove(moveObj);\n      if (!validatedMove) {\n        console.error(\"AI move validation failed:\", moveObj);\n        \n        // Try to find a legal move as fallback\n        const legalMoves = game.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          makeMove(randomMove);\n        }\n        return;\n      }\n      \n      // Make the move using the validated move object\n      const result = makeMove(validatedMove);\n      if (!result) {\n        throw new Error(\"AI move failed to apply\");\n      }\n      \n      console.log(\"AI move applied:\", result);\n      \n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          makeMove(randomMove);\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}