{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n\n  // Function to make a move\n  function makeMove(move) {\n    const gameCopy = new Chess(game.fen());\n    try {\n      const result = gameCopy.move(move);\n      setGame(gameCopy);\n\n      // Update move history\n      if (result) {\n        setMoveHistory([...moveHistory, result.san]);\n      }\n      return result; // null if the move was invalid\n    } catch (error) {\n      console.error('Invalid move:', error);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Make user move\n    const move = makeMove({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for simplicity\n    });\n\n    // If invalid move\n    if (move === null) return false;\n\n    // Check if game is over\n    if (game.isGameOver()) {\n      handleGameOver();\n      return true;\n    }\n\n    // AI makes a move\n    setTimeout(makeAIMove, 300);\n    return true;\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      const data = await response.json();\n\n      // Make the AI move\n      makeMove(data.move);\n\n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n  }\n\n  // Toggle board orientation\n  function flipBoard() {\n    setBoardOrientation(boardOrientation === 'white' ? 'black' : 'white');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: \"Flip Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: \"AI is thinking...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 24\n    }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"bG9utMR1ipD8dsgPiS1kxmthoEw=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","makeMove","move","gameCopy","fen","result","san","error","console","onDrop","sourceSquare","targetSquare","from","to","promotion","isGameOver","handleGameOver","setTimeout","makeAIMove","response","fetch","method","headers","body","JSON","stringify","data","json","isCheckmate","turn","saveGameData","pgn","history","resetGame","flipBoard","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n\n  // Function to make a move\n  function makeMove(move) {\n    const gameCopy = new Chess(game.fen());\n    try {\n      const result = gameCopy.move(move);\n      setGame(gameCopy);\n\n      // Update move history\n      if (result) {\n        setMoveHistory([...moveHistory, result.san]);\n      }\n\n      return result; // null if the move was invalid\n    } catch (error) {\n      console.error('Invalid move:', error);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Make user move\n    const move = makeMove({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q', // always promote to a queen for simplicity\n    });\n\n    // If invalid move\n    if (move === null) return false;\n\n    // Check if game is over\n    if (game.isGameOver()) {\n      handleGameOver();\n      return true;\n    }\n\n    // AI makes a move\n    setTimeout(makeAIMove, 300);\n    return true;\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      const data = await response.json();\n      \n      // Make the AI move\n      makeMove(data.move);\n      \n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n  }\n\n  // Toggle board orientation\n  function flipBoard() {\n    setBoardOrientation(boardOrientation === 'white' ? 'black' : 'white');\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Flip Board</button>\n      </div>\n      \n      {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n      \n      {game.isGameOver() && (\n        <div className=\"game-over\">\n          {game.isCheckmate() \n            ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n            : 'Game ended in a draw'}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}