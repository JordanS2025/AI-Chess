{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n\n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Function to make a move, ensuring it's applied exactly as intended\n  function makePlayerMove(sourceSquare, targetSquare) {\n    console.log(\"Attempting player move from\", sourceSquare, \"to\", targetSquare);\n\n    // Create a new game state from the current position\n    const gameCopy = new Chess(game.fen());\n\n    // Get all legal moves for this specific piece and square\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n\n    // Find the EXACT matching move for the target square\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    try {\n      // Create the exact move object with promotion if needed\n      const moveObj = {\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: legalMove.promotion || undefined\n      };\n      console.log(\"Move object being applied:\", moveObj);\n\n      // IMPORTANT FIX: Apply the move directly with the exact move object\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"Failed to apply legal move:\", moveObj);\n        return false;\n      }\n      console.log(\"Player move successfully applied:\", result);\n      console.log(\"New board position:\", gameCopy.fen());\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory(prev => [...prev, result.san]);\n\n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n\n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making player move:\", error);\n      return false;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n\n    // Get all legal moves from the source square \n    const legalMoves = showLegalMoves(sourceSquare);\n\n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n\n    // FIX: Use the simplified move function that preserves the exact move\n    return makePlayerMove(sourceSquare, targetSquare);\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    // Prevent multiple simultaneous AI moves\n    if (isAIThinking) {\n      console.log(\"AI is already thinking, skipping move request\");\n      return;\n    }\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n\n    // Capture current FEN and ensure we're using the latest state\n    const currentFEN = game.fen();\n    console.log(\"Current FEN for AI move:\", currentFEN);\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: currentFEN\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n\n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // FIX: Create a new game instance for this move to avoid state conflicts\n      const gameCopy = new Chess(game.fen());\n      try {\n        // Apply the AI move using the exact move object\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to,\n          promotion: data.move.promotion\n        };\n        console.log(\"AI move being applied:\", moveObj);\n        const result = gameCopy.move(moveObj);\n        if (!result) {\n          throw new Error(\"Failed to apply AI move: \" + JSON.stringify(moveObj));\n        }\n        console.log(\"AI move successfully applied:\", result);\n        console.log(\"New board position:\", gameCopy.fen());\n\n        // Update the game state with the successful move\n        setGame(gameCopy);\n\n        // Update move history\n        setMoveHistory(prev => [...prev, result.san]);\n\n        // Check if game is over after AI move\n        if (gameCopy.isGameOver()) {\n          handleGameOver();\n        }\n      } catch (moveError) {\n        console.error(\"Error applying AI move:\", moveError);\n\n        // Fallback: Try to find a legal move that matches as closely as possible\n        const legalMoves = gameCopy.moves({\n          verbose: true\n        });\n        console.log(\"Available legal moves:\", legalMoves);\n        const fallbackMove = legalMoves.find(move => move.from === data.move.from && move.to === data.move.to);\n        if (fallbackMove) {\n          console.log(\"Found fallback legal move:\", fallbackMove);\n          const result = gameCopy.move(fallbackMove);\n\n          // Update state with fallback move\n          setGame(gameCopy);\n          setMoveHistory(prev => [...prev, result.san]);\n          if (gameCopy.isGameOver()) {\n            handleGameOver();\n          }\n        } else {\n          console.error(\"No matching legal move found for AI's intended move\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error during AI move:\", error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // If it's AI's turn and the game is not over and AI is not already thinking\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      // Use a timeout to ensure state updates have settled\n      const timeoutId = setTimeout(() => {\n        makeAIMove();\n      }, 500);\n\n      // Cleanup timeout if component unmounts or dependencies change\n      return () => clearTimeout(timeoutId);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n\n    // Only allow interaction when it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n\n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n\n        // Only allow selecting pieces of the player's color\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n\n          // Get and show legal moves for the selected piece\n          const legalMoves = showLegalMoves(square);\n\n          // Create a map of legal target squares for highlighting\n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n\n          // Set the legal move squares for highlighting\n          setLegalMoveSquares(legalSquares);\n        }\n      }\n      return;\n    }\n\n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      // If clicking the same square, deselect it\n      if (selectedSquare === square) {\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n\n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      if (!isLegalTarget) {\n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n\n            // Update legal move highlights for the new selected piece\n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n\n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n\n      // FIX: Use the simplified move function that preserves the exact move\n      const result = makePlayerMove(selectedSquare, square);\n\n      // Clear selection and legal move highlights\n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square and legal moves\n  function getCustomSquareStyles() {\n    const combinedStyles = {\n      ...legalMoveSquares\n    };\n\n    // Add highlight for the selected square\n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      };\n    }\n    return combinedStyles;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        },\n        arePiecesDraggable: true,\n        animationDuration: 200,\n        isDraggablePiece: isDraggablePiece,\n        onSquareClick: onSquareClick,\n        customSquareStyles: getCustomSquareStyles()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"QBx28ynDmaskdJvk4rKRr6Td/g0=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","selectedSquare","setSelectedSquare","legalMoveSquares","setLegalMoveSquares","showLegalMoves","sourceSquare","legalMoves","moves","square","verbose","console","log","makePlayerMove","targetSquare","gameCopy","fen","legalMove","find","move","to","error","moveObj","from","promotion","undefined","result","prev","san","isGameOver","handleGameOver","setTimeout","makeAIMove","onDrop","currentTurn","turn","isLegalTarget","some","currentFEN","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","moveError","fallbackMove","isCheckmate","saveGameData","pgn","history","resetGame","flipBoard","newOrientation","newGame","timeoutId","clearTimeout","onSquareClick","piece","get","pieceColor","color","legalSquares","forEach","background","borderRadius","newLegalMoves","newLegalSquares","isDraggablePiece","charAt","toLowerCase","getCustomSquareStyles","combinedStyles","backgroundColor","className","children","position","onPieceDrop","customBoardStyle","boxShadow","arePiecesDraggable","animationDuration","customSquareStyles","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n\n  // Debug function to show all legal moves from a position\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    \n    // Get all legal moves for the piece at the source square\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Function to make a move, ensuring it's applied exactly as intended\n  function makePlayerMove(sourceSquare, targetSquare) {\n    console.log(\"Attempting player move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Create a new game state from the current position\n    const gameCopy = new Chess(game.fen());\n    \n    // Get all legal moves for this specific piece and square\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    // Find the EXACT matching move for the target square\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    try {\n      // Create the exact move object with promotion if needed\n      const moveObj = {\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: legalMove.promotion || undefined\n      };\n      \n      console.log(\"Move object being applied:\", moveObj);\n      \n      // IMPORTANT FIX: Apply the move directly with the exact move object\n      const result = gameCopy.move(moveObj);\n      \n      if (!result) {\n        console.error(\"Failed to apply legal move:\", moveObj);\n        return false;\n      }\n      \n      console.log(\"Player move successfully applied:\", result);\n      console.log(\"New board position:\", gameCopy.fen());\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory(prev => [...prev, result.san]);\n      \n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n      \n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making player move:\", error);\n      return false;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Get all legal moves from the source square \n    const legalMoves = showLegalMoves(sourceSquare);\n    \n    // Check if the target square is a legal destination\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    \n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    // FIX: Use the simplified move function that preserves the exact move\n    return makePlayerMove(sourceSquare, targetSquare);\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    // Prevent multiple simultaneous AI moves\n    if (isAIThinking) {\n      console.log(\"AI is already thinking, skipping move request\");\n      return;\n    }\n\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    \n    // Capture current FEN and ensure we're using the latest state\n    const currentFEN = game.fen();\n    console.log(\"Current FEN for AI move:\", currentFEN);\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: currentFEN }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // FIX: Create a new game instance for this move to avoid state conflicts\n      const gameCopy = new Chess(game.fen());\n      \n      try {\n        // Apply the AI move using the exact move object\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to,\n          promotion: data.move.promotion\n        };\n        \n        console.log(\"AI move being applied:\", moveObj);\n        const result = gameCopy.move(moveObj);\n        \n        if (!result) {\n          throw new Error(\"Failed to apply AI move: \" + JSON.stringify(moveObj));\n        }\n        \n        console.log(\"AI move successfully applied:\", result);\n        console.log(\"New board position:\", gameCopy.fen());\n        \n        // Update the game state with the successful move\n        setGame(gameCopy);\n        \n        // Update move history\n        setMoveHistory(prev => [...prev, result.san]);\n        \n        // Check if game is over after AI move\n        if (gameCopy.isGameOver()) {\n          handleGameOver();\n        }\n      } catch (moveError) {\n        console.error(\"Error applying AI move:\", moveError);\n        \n        // Fallback: Try to find a legal move that matches as closely as possible\n        const legalMoves = gameCopy.moves({ verbose: true });\n        console.log(\"Available legal moves:\", legalMoves);\n        \n        const fallbackMove = legalMoves.find(move => \n          move.from === data.move.from && move.to === data.move.to\n        );\n        \n        if (fallbackMove) {\n          console.log(\"Found fallback legal move:\", fallbackMove);\n          const result = gameCopy.move(fallbackMove);\n          \n          // Update state with fallback move\n          setGame(gameCopy);\n          setMoveHistory(prev => [...prev, result.san]);\n          \n          if (gameCopy.isGameOver()) {\n            handleGameOver();\n          }\n        } else {\n          console.error(\"No matching legal move found for AI's intended move\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error during AI move:\", error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // If it's AI's turn and the game is not over and AI is not already thinking\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      // Use a timeout to ensure state updates have settled\n      const timeoutId = setTimeout(() => {\n        makeAIMove();\n      }, 500);\n      \n      // Cleanup timeout if component unmounts or dependencies change\n      return () => clearTimeout(timeoutId);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Handle square click for click-to-move functionality\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    \n    // Only allow interaction when it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n    \n    // If no square is selected yet, select this square if it has a piece of the player's color\n    if (!selectedSquare) {\n      const piece = game.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        \n        // Only allow selecting pieces of the player's color\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          \n          // Get and show legal moves for the selected piece\n          const legalMoves = showLegalMoves(square);\n          \n          // Create a map of legal target squares for highlighting\n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n          \n          // Set the legal move squares for highlighting\n          setLegalMoveSquares(legalSquares);\n        }\n      }\n      return;\n    }\n    \n    // If a square is already selected, try to move from the selected square to this square\n    if (selectedSquare) {\n      // If clicking the same square, deselect it\n      if (selectedSquare === square) {\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n      \n      // Check if this is a legal move\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      \n      if (!isLegalTarget) {\n        // If the new square has a piece of the player's color, select it instead\n        const piece = game.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            \n            // Update legal move highlights for the new selected piece\n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            \n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n        \n        // Otherwise, just clear the selection\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n      \n      // FIX: Use the simplified move function that preserves the exact move\n      const result = makePlayerMove(selectedSquare, square);\n      \n      // Clear selection and legal move highlights\n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      \n      return result;\n    }\n  }\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({ piece, sourceSquare }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  // Get custom square styles to highlight the selected square and legal moves\n  function getCustomSquareStyles() {\n    const combinedStyles = { ...legalMoveSquares };\n    \n    // Add highlight for the selected square\n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      };\n    }\n    \n    return combinedStyles;\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n          arePiecesDraggable={true}\n          animationDuration={200}\n          isDraggablePiece={isDraggablePiece}\n          onSquareClick={onSquareClick}\n          customSquareStyles={getCustomSquareStyles()}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}