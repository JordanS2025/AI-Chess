{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n\n  // Function to make a move\n  function makeMove(move) {\n    console.log(\"Making move:\", move);\n    const gameCopy = new Chess(game.fen());\n    console.log(\"Current position before move:\", gameCopy.fen());\n    try {\n      // Check if the move is in the list of legal moves\n      const legalMoves = gameCopy.moves({\n        verbose: true\n      });\n      console.log(\"Legal moves:\", legalMoves.map(m => `${m.from}-${m.to}`));\n\n      // Try to make the move\n      const result = gameCopy.move(move);\n      console.log(\"Move result:\", result);\n      if (result) {\n        console.log(\"Move was successful\");\n        console.log(\"New position after move:\", gameCopy.fen());\n        setGame(gameCopy);\n\n        // Update move history\n        setMoveHistory([...moveHistory, result.san]);\n        console.log(\"Updated move history:\", [...moveHistory, result.san]);\n      } else {\n        console.log(\"Move was unsuccessful but didn't throw an error\");\n      }\n      return result; // null if the move was invalid\n    } catch (error) {\n      console.error('Invalid move error:', error);\n      console.log(\"Move that caused error:\", move);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    console.log(`User attempting move from ${sourceSquare} to ${targetSquare}`);\n\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    // Log the current board state before the move\n    console.log(\"Board state before user move:\", game.fen());\n\n    // Create the move object\n    const moveObj = {\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for simplicity\n    };\n    console.log(\"User move object:\", moveObj);\n\n    // Make user move\n    const move = makeMove(moveObj);\n\n    // If invalid move\n    if (move === null) {\n      console.log(\"Move was invalid and rejected\");\n      return false;\n    }\n    console.log(\"Move was accepted. New board state:\", game.fen());\n    console.log(\"Move details:\", move);\n\n    // Check if game is over\n    if (game.isGameOver()) {\n      handleGameOver();\n      return true;\n    }\n\n    // AI makes a move after a short delay\n    console.log(\"Scheduling AI move in 300ms\");\n    setTimeout(makeAIMove, 300);\n    return true;\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current board state for AI move:\", game.fen());\n    console.log(\"Current turn:\", game.turn() === 'w' ? 'white' : 'black');\n    try {\n      // Call your FastAPI backend\n      console.log(\"Sending request to backend for AI move\");\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`Backend error: ${response.status}`, errorText);\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move from backend:\", data.move);\n\n      // Make the AI move\n      console.log(\"Applying AI move to board\");\n      const moveResult = makeMove(data.move);\n      console.log(\"AI move applied, result:\", moveResult);\n      console.log(\"New board state after AI move:\", game.fen());\n\n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        console.log(\"Game is over after AI move\");\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"N6CiMXgNEF9icXh0np0dcMfX9Do=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","makeMove","move","console","log","gameCopy","fen","legalMoves","moves","verbose","map","m","from","to","result","san","error","onDrop","sourceSquare","targetSquare","currentTurn","turn","moveObj","promotion","isGameOver","handleGameOver","setTimeout","makeAIMove","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","status","Error","data","json","moveResult","isCheckmate","saveGameData","pgn","history","resetGame","flipBoard","newOrientation","newGame","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n\n  // Function to make a move\n  function makeMove(move) {\n    console.log(\"Making move:\", move);\n    const gameCopy = new Chess(game.fen());\n    console.log(\"Current position before move:\", gameCopy.fen());\n    \n    try {\n      // Check if the move is in the list of legal moves\n      const legalMoves = gameCopy.moves({ verbose: true });\n      console.log(\"Legal moves:\", legalMoves.map(m => `${m.from}-${m.to}`));\n      \n      // Try to make the move\n      const result = gameCopy.move(move);\n      console.log(\"Move result:\", result);\n      \n      if (result) {\n        console.log(\"Move was successful\");\n        console.log(\"New position after move:\", gameCopy.fen());\n        setGame(gameCopy);\n\n        // Update move history\n        setMoveHistory([...moveHistory, result.san]);\n        console.log(\"Updated move history:\", [...moveHistory, result.san]);\n      } else {\n        console.log(\"Move was unsuccessful but didn't throw an error\");\n      }\n\n      return result; // null if the move was invalid\n    } catch (error) {\n      console.error('Invalid move error:', error);\n      console.log(\"Move that caused error:\", move);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    console.log(`User attempting move from ${sourceSquare} to ${targetSquare}`);\n    \n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    // Log the current board state before the move\n    console.log(\"Board state before user move:\", game.fen());\n    \n    // Create the move object\n    const moveObj = {\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q', // always promote to a queen for simplicity\n    };\n    console.log(\"User move object:\", moveObj);\n    \n    // Make user move\n    const move = makeMove(moveObj);\n\n    // If invalid move\n    if (move === null) {\n      console.log(\"Move was invalid and rejected\");\n      return false;\n    }\n    \n    console.log(\"Move was accepted. New board state:\", game.fen());\n    console.log(\"Move details:\", move);\n\n    // Check if game is over\n    if (game.isGameOver()) {\n      handleGameOver();\n      return true;\n    }\n\n    // AI makes a move after a short delay\n    console.log(\"Scheduling AI move in 300ms\");\n    setTimeout(makeAIMove, 300);\n    return true;\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current board state for AI move:\", game.fen());\n    console.log(\"Current turn:\", game.turn() === 'w' ? 'white' : 'black');\n\n    try {\n      // Call your FastAPI backend\n      console.log(\"Sending request to backend for AI move\");\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`Backend error: ${response.status}`, errorText);\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move from backend:\", data.move);\n      \n      // Make the AI move\n      console.log(\"Applying AI move to board\");\n      const moveResult = makeMove(data.move);\n      console.log(\"AI move applied, result:\", moveResult);\n      console.log(\"New board state after AI move:\", game.fen());\n      \n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        console.log(\"Game is over after AI move\");\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}