{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white');\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n  // Use a ref to track the current game state for async operations\n  const gameRef = useRef(new Chess());\n\n  // Update the ref whenever game state changes\n  useEffect(() => {\n    gameRef.current = new Chess(game.fen());\n  }, [game]);\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Make AI move - wrapped in useCallback to fix dependency warning\n  const makeAIMove = useCallback(async () => {\n    if (isAIThinking) {\n      console.log(\"AI is already thinking, skipping move request\");\n      return;\n    }\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    try {\n      // Use the gameRef to get the current state\n      const currentFEN = gameRef.current.fen();\n      console.log(\"Current FEN for AI move:\", currentFEN);\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: currentFEN\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Use the gameRef to make the AI move\n      const gameCopy = new Chess(currentFEN);\n      try {\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to,\n          promotion: data.move.promotion\n        };\n        console.log(\"AI move being applied:\", moveObj);\n        const result = gameCopy.move(moveObj);\n        if (!result) {\n          throw new Error(\"Failed to apply AI move: \" + JSON.stringify(moveObj));\n        }\n        console.log(\"AI move successfully applied:\", result);\n        console.log(\"New board position:\", gameCopy.fen());\n\n        // Update the game state and ref\n        setGame(gameCopy);\n        gameRef.current = gameCopy;\n        setMoveHistory(prev => [...prev, result.san]);\n        if (gameCopy.isGameOver()) {\n          handleGameOver(gameCopy);\n        }\n      } catch (moveError) {\n        console.error(\"Error applying AI move:\", moveError);\n      }\n    } catch (error) {\n      console.error(\"Error during AI move:\", error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }, [isAIThinking]);\n  function onDrop(sourceSquare, targetSquare, piece) {\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    const legalMoves = showLegalMoves(sourceSquare);\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n\n    // If this is a promotion move, get the promotion piece from the piece parameter\n    const promotion = piece ? piece.charAt(1).toLowerCase() : null;\n    return makePlayerMove(sourceSquare, targetSquare, promotion);\n  }\n  function makePlayerMove(sourceSquare, targetSquare, promotion = null) {\n    console.log(\"Attempting player move from\", sourceSquare, \"to\", targetSquare);\n    const gameCopy = new Chess(gameRef.current.fen());\n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    try {\n      console.log(\"Move being applied:\", legalMove);\n      const result = gameCopy.move({\n        from: legalMove.from,\n        to: legalMove.to,\n        promotion: promotion\n      });\n      if (!result) {\n        console.error(\"Failed to apply legal move:\", legalMove);\n        return false;\n      }\n      console.log(\"Player move successfully applied:\", result);\n      console.log(\"New board position:\", gameCopy.fen());\n\n      // Update both state and ref\n      setGame(gameCopy);\n      gameRef.current = gameCopy;\n      setMoveHistory(prev => [...prev, result.san]);\n      if (gameCopy.isGameOver()) {\n        handleGameOver(gameCopy);\n        return true;\n      }\n\n      // Now make the AI move\n      setTimeout(() => {\n        makeAIMove();\n      }, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making player move:\", error);\n      return false;\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    if (!isAIThinking) {\n      const timeoutId = setTimeout(() => {\n        const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n        if (currentTurn !== playerColor && !gameRef.current.isGameOver()) {\n          makeAIMove();\n        }\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [game, playerColor, isAIThinking, makeAIMove]);\n  function handleGameOver(currentGame) {\n    const gameToUse = currentGame || game;\n    let result = 'draw';\n    if (gameToUse.isCheckmate()) {\n      result = gameToUse.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n    saveGameData(result, gameToUse);\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: gameToUse.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n  async function saveGameData(result, currentGame) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: currentGame.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n  function resetGame() {\n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n    if (!selectedSquare) {\n      const piece = gameRef.current.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          const legalMoves = showLegalMoves(square);\n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n          setLegalMoveSquares(legalSquares);\n        }\n      }\n      return;\n    }\n    if (selectedSquare) {\n      if (selectedSquare === square) {\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      if (!isLegalTarget) {\n        const piece = gameRef.current.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n      const result = makePlayerMove(selectedSquare, square);\n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      return result;\n    }\n  }\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n  function getCustomSquareStyles() {\n    const combinedStyles = {\n      ...legalMoveSquares\n    };\n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      };\n    }\n    return combinedStyles;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: flipBoard,\n          children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          position: game.fen(),\n          onPieceDrop: onDrop,\n          boardOrientation: boardOrientation,\n          customBoardStyle: {\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          },\n          arePiecesDraggable: true,\n          animationDuration: 200,\n          isDraggablePiece: isDraggablePiece,\n          onSquareClick: onSquareClick,\n          customSquareStyles: getCustomSquareStyles(),\n          promotionToSquare: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: move\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-info\",\n          children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: playerColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status\",\n          children: \"AI is thinking...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 28\n        }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-over\",\n          children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ChessBoard, \"XNSB4QjBH1WMzdYjXeSyWBXtfbE=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Chessboard","Chess","jsxDEV","_jsxDEV","Fragment","_Fragment","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","selectedSquare","setSelectedSquare","legalMoveSquares","setLegalMoveSquares","gameRef","current","fen","showLegalMoves","sourceSquare","legalMoves","moves","square","verbose","console","log","makeAIMove","currentFEN","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","move","from","to","gameCopy","moveObj","promotion","result","prev","san","isGameOver","handleGameOver","moveError","error","onDrop","targetSquare","piece","currentTurn","turn","isLegalTarget","some","charAt","toLowerCase","makePlayerMove","legalMove","find","setTimeout","timeoutId","clearTimeout","currentGame","gameToUse","isCheckmate","saveGameData","pgn","history","resetGame","newGame","flipBoard","newOrientation","onSquareClick","get","pieceColor","color","legalSquares","forEach","background","borderRadius","newLegalMoves","newLegalSquares","isDraggablePiece","getCustomSquareStyles","combinedStyles","backgroundColor","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","position","onPieceDrop","customBoardStyle","boxShadow","arePiecesDraggable","animationDuration","customSquareStyles","promotionToSquare","map","index","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white');\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [legalMoveSquares, setLegalMoveSquares] = useState({});\n  // Use a ref to track the current game state for async operations\n  const gameRef = useRef(new Chess());\n\n  // Update the ref whenever game state changes\n  useEffect(() => {\n    gameRef.current = new Chess(game.fen());\n  }, [game]);\n\n  function showLegalMoves(sourceSquare) {\n    if (!sourceSquare) return [];\n    \n    const legalMoves = game.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    console.log(`Legal moves from ${sourceSquare}:`, legalMoves);\n    return legalMoves;\n  }\n\n  // Make AI move - wrapped in useCallback to fix dependency warning\n  const makeAIMove = useCallback(async () => {\n    if (isAIThinking) {\n      console.log(\"AI is already thinking, skipping move request\");\n      return;\n    }\n\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    \n    try {\n      // Use the gameRef to get the current state\n      const currentFEN = gameRef.current.fen();\n      console.log(\"Current FEN for AI move:\", currentFEN);\n\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: currentFEN }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Use the gameRef to make the AI move\n      const gameCopy = new Chess(currentFEN);\n      \n      try {\n        const moveObj = {\n          from: data.move.from,\n          to: data.move.to,\n          promotion: data.move.promotion\n        };\n        \n        console.log(\"AI move being applied:\", moveObj);\n        const result = gameCopy.move(moveObj);\n        \n        if (!result) {\n          throw new Error(\"Failed to apply AI move: \" + JSON.stringify(moveObj));\n        }\n        \n        console.log(\"AI move successfully applied:\", result);\n        console.log(\"New board position:\", gameCopy.fen());\n        \n        // Update the game state and ref\n        setGame(gameCopy);\n        gameRef.current = gameCopy;\n        \n        setMoveHistory(prev => [...prev, result.san]);\n        \n        if (gameCopy.isGameOver()) {\n          handleGameOver(gameCopy);\n        }\n      } catch (moveError) {\n        console.error(\"Error applying AI move:\", moveError);\n      }\n    } catch (error) {\n      console.error(\"Error during AI move:\", error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }, [isAIThinking]);\n\n  function onDrop(sourceSquare, targetSquare, piece) {\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    const legalMoves = showLegalMoves(sourceSquare);\n    const isLegalTarget = legalMoves.some(move => move.to === targetSquare);\n    \n    if (!isLegalTarget) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    // If this is a promotion move, get the promotion piece from the piece parameter\n    const promotion = piece ? piece.charAt(1).toLowerCase() : null;\n    return makePlayerMove(sourceSquare, targetSquare, promotion);\n  }\n\n  function makePlayerMove(sourceSquare, targetSquare, promotion = null) {\n    console.log(\"Attempting player move from\", sourceSquare, \"to\", targetSquare);\n    \n    const gameCopy = new Chess(gameRef.current.fen());\n    \n    const legalMoves = gameCopy.moves({\n      square: sourceSquare,\n      verbose: true\n    });\n    \n    const legalMove = legalMoves.find(move => move.to === targetSquare);\n    if (!legalMove) {\n      console.error(`${targetSquare} is not a legal target from ${sourceSquare}`);\n      return false;\n    }\n    \n    try {\n      console.log(\"Move being applied:\", legalMove);\n      \n      const result = gameCopy.move({\n        from: legalMove.from,\n        to: legalMove.to,\n        promotion: promotion\n      });\n      \n      if (!result) {\n        console.error(\"Failed to apply legal move:\", legalMove);\n        return false;\n      }\n      \n      console.log(\"Player move successfully applied:\", result);\n      console.log(\"New board position:\", gameCopy.fen());\n      \n      // Update both state and ref\n      setGame(gameCopy);\n      gameRef.current = gameCopy;\n      \n      setMoveHistory(prev => [...prev, result.san]);\n      \n      if (gameCopy.isGameOver()) {\n        handleGameOver(gameCopy);\n        return true;\n      }\n      \n      // Now make the AI move\n      setTimeout(() => {\n        makeAIMove();\n      }, 300);\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error making player move:\", error);\n      return false;\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    if (!isAIThinking) {\n      const timeoutId = setTimeout(() => {\n        const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n        \n        if (currentTurn !== playerColor && !gameRef.current.isGameOver()) {\n          makeAIMove();\n        }\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [game, playerColor, isAIThinking, makeAIMove]);\n\n  function handleGameOver(currentGame) {\n    const gameToUse = currentGame || game;\n    let result = 'draw';\n    if (gameToUse.isCheckmate()) {\n      result = gameToUse.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n    saveGameData(result, gameToUse);\n    \n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: gameToUse.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  async function saveGameData(result, currentGame) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: currentGame.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  function resetGame() {\n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    \n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    const newGame = new Chess();\n    setGame(newGame);\n    gameRef.current = newGame;\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setLegalMoveSquares({});\n    \n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  function onSquareClick(square) {\n    console.log(\"Square clicked:\", square);\n    \n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return;\n    }\n    \n    if (!selectedSquare) {\n      const piece = gameRef.current.get(square);\n      if (piece) {\n        const pieceColor = piece.color === 'w' ? 'white' : 'black';\n        \n        if (pieceColor === playerColor) {\n          setSelectedSquare(square);\n          \n          const legalMoves = showLegalMoves(square);\n          \n          const legalSquares = {};\n          legalMoves.forEach(move => {\n            legalSquares[move.to] = {\n              background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n              borderRadius: '50%'\n            };\n          });\n          \n          setLegalMoveSquares(legalSquares);\n        }\n      }\n      return;\n    }\n    \n    if (selectedSquare) {\n      if (selectedSquare === square) {\n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return;\n      }\n      \n      const legalMoves = showLegalMoves(selectedSquare);\n      const isLegalTarget = legalMoves.some(move => move.to === square);\n      \n      if (!isLegalTarget) {\n        const piece = gameRef.current.get(square);\n        if (piece) {\n          const pieceColor = piece.color === 'w' ? 'white' : 'black';\n          if (pieceColor === playerColor) {\n            setSelectedSquare(square);\n            \n            const newLegalMoves = showLegalMoves(square);\n            const newLegalSquares = {};\n            newLegalMoves.forEach(move => {\n              newLegalSquares[move.to] = {\n                background: 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n                borderRadius: '50%'\n              };\n            });\n            \n            setLegalMoveSquares(newLegalSquares);\n            return;\n          }\n        }\n        \n        setSelectedSquare(null);\n        setLegalMoveSquares({});\n        return false;\n      }\n      \n      const result = makePlayerMove(selectedSquare, square);\n      \n      setSelectedSquare(null);\n      setLegalMoveSquares({});\n      \n      return result;\n    }\n  }\n\n  function isDraggablePiece({ piece, sourceSquare }) {\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = gameRef.current.turn() === 'w' ? 'white' : 'black';\n    \n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  function getCustomSquareStyles() {\n    const combinedStyles = { ...legalMoveSquares };\n    \n    if (selectedSquare) {\n      combinedStyles[selectedSquare] = {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)',\n      };\n    }\n    \n    return combinedStyles;\n  }\n\n  return (\n    <>\n      <div className=\"chessboard-container\">\n        <div className=\"controls\">\n          <button onClick={resetGame}>New Game</button>\n          <button onClick={flipBoard}>\n            Play as {boardOrientation === 'white' ? 'Black' : 'White'}\n          </button>\n        </div>\n        <div className=\"board\">\n          <Chessboard\n            position={game.fen()}\n            onPieceDrop={onDrop}\n            boardOrientation={boardOrientation}\n            customBoardStyle={{\n              borderRadius: '5px',\n              boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)',\n            }}\n            arePiecesDraggable={true}\n            animationDuration={200}\n            isDraggablePiece={isDraggablePiece}\n            onSquareClick={onSquareClick}\n            customSquareStyles={getCustomSquareStyles()}\n            promotionToSquare={true}\n          />\n        </div>\n        <div className=\"move-history\">\n          <h2>Move History</h2> \n          <ul>\n            {moveHistory.map((move, index) => (\n              <li key={index}>{move}</li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"game-info\">\n          <div className=\"player-info\">\n            Playing as: <strong>{playerColor}</strong>\n          </div>\n          {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n          {game.isGameOver() && (\n            <div className=\"game-over\">\n              {game.isCheckmate()\n                ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!`\n                : 'Game ended in a draw'}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}