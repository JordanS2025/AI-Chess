{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n\n    // Create the move object with exactly the source and target squares the user selected\n    const moveObj = {\n      from: sourceSquare,\n      to: targetSquare\n    };\n\n    // Check if this is a pawn promotion move\n    const piece = game.get(sourceSquare);\n    if (piece && piece.type === 'p' && (targetSquare.charAt(1) === '8' && piece.color === 'w' || targetSquare.charAt(1) === '1' && piece.color === 'b')) {\n      // Only add promotion for pawn moves to the last rank\n      moveObj.promotion = 'q'; // promote to queen\n      console.log(\"This is a promotion move\");\n    }\n\n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      // Apply the move exactly as specified by the user\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"Invalid move:\", moveObj);\n        return false;\n      }\n      console.log(\"Move successfully applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n\n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n\n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n\n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n\n      // Create the move object with exactly what the AI returned\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to\n      };\n\n      // Only include promotion if it's specified by the AI\n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n        console.log(\"AI move includes promotion to:\", data.move.promotion);\n      }\n\n      // Try to make the move directly\n      const gameCopy = new Chess(game.fen());\n      const result = gameCopy.move(moveObj);\n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n\n        // Try to find a legal move as fallback\n        const legalMoves = game.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const fallbackResult = gameCopy.move(randomMove);\n          if (fallbackResult) {\n            console.log(\"Fallback move applied:\", fallbackResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, fallbackResult.san]);\n          }\n        }\n        return;\n      }\n      console.log(\"AI move successfully applied:\", result);\n\n      // Update the game state with the successful move\n      setGame(gameCopy);\n\n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n\n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({\n          verbose: true\n        });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          const gameCopy = new Chess(game.fen());\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, result.san]);\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n\n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n\n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n\n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({\n    piece,\n    sourceSquare\n  }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n\n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        },\n        arePiecesDraggable: true,\n        animationDuration: 200,\n        isDraggablePiece: isDraggablePiece\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipBoard,\n        children: [\"Play as \", boardOrientation === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-info\",\n        children: [\"Playing as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 26\n      }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"N6CiMXgNEF9icXh0np0dcMfX9Do=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerColor","setPlayerColor","onDrop","sourceSquare","targetSquare","currentTurn","turn","console","log","moveObj","from","to","piece","get","type","charAt","color","promotion","gameCopy","fen","result","move","error","san","isGameOver","handleGameOver","setTimeout","makeAIMove","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","status","data","json","legalMoves","moves","verbose","length","randomMove","Math","floor","random","fallbackResult","fallbackError","isCheckmate","saveGameData","pgn","history","resetGame","flipBoard","newOrientation","newGame","isDraggablePiece","pieceColor","toLowerCase","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","arePiecesDraggable","animationDuration","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerColor, setPlayerColor] = useState('white'); // Player plays as white by default\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Only allow moves if it's the player's turn\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    if (currentTurn !== playerColor) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    console.log(\"User attempting move from\", sourceSquare, \"to\", targetSquare);\n    \n    // Create the move object with exactly the source and target squares the user selected\n    const moveObj = {\n      from: sourceSquare,\n      to: targetSquare,\n    };\n    \n    // Check if this is a pawn promotion move\n    const piece = game.get(sourceSquare);\n    if (piece && piece.type === 'p' && \n        ((targetSquare.charAt(1) === '8' && piece.color === 'w') || \n         (targetSquare.charAt(1) === '1' && piece.color === 'b'))) {\n      // Only add promotion for pawn moves to the last rank\n      moveObj.promotion = 'q'; // promote to queen\n      console.log(\"This is a promotion move\");\n    }\n    \n    // Try to make the move directly\n    const gameCopy = new Chess(game.fen());\n    try {\n      // Apply the move exactly as specified by the user\n      const result = gameCopy.move(moveObj);\n      \n      if (!result) {\n        console.error(\"Invalid move:\", moveObj);\n        return false;\n      }\n      \n      console.log(\"Move successfully applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      \n      // Check if game is over\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n        return true;\n      }\n      \n      // AI makes a move after a short delay\n      setTimeout(makeAIMove, 300);\n      return true;\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n      return false;\n    }\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    console.log(\"AI is thinking...\");\n    console.log(\"Current FEN:\", game.fen());\n\n    try {\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server responded with ${response.status}: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"AI selected move:\", data.move);\n      \n      // Validate the move data\n      if (!data.move || !data.move.from || !data.move.to) {\n        throw new Error(\"Invalid move data received from AI: \" + JSON.stringify(data));\n      }\n      \n      // Create the move object with exactly what the AI returned\n      const moveObj = {\n        from: data.move.from,\n        to: data.move.to,\n      };\n      \n      // Only include promotion if it's specified by the AI\n      if (data.move.promotion) {\n        moveObj.promotion = data.move.promotion;\n        console.log(\"AI move includes promotion to:\", data.move.promotion);\n      }\n      \n      // Try to make the move directly\n      const gameCopy = new Chess(game.fen());\n      const result = gameCopy.move(moveObj);\n      \n      if (!result) {\n        console.error(\"AI move is invalid:\", moveObj);\n        \n        // Try to find a legal move as fallback\n        const legalMoves = game.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const fallbackResult = gameCopy.move(randomMove);\n          if (fallbackResult) {\n            console.log(\"Fallback move applied:\", fallbackResult);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, fallbackResult.san]);\n          }\n        }\n        return;\n      }\n      \n      console.log(\"AI move successfully applied:\", result);\n      \n      // Update the game state with the successful move\n      setGame(gameCopy);\n      \n      // Update move history\n      setMoveHistory([...moveHistory, result.san]);\n      \n      // Check if game is over after AI move\n      if (gameCopy.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n      // If there's an error with the AI move, we might want to handle it gracefully\n      // For example, we could make a random legal move instead\n      try {\n        const legalMoves = game.moves({ verbose: true });\n        if (legalMoves.length > 0) {\n          const randomMove = legalMoves[Math.floor(Math.random() * legalMoves.length)];\n          console.log(\"Making random move instead:\", randomMove);\n          \n          const gameCopy = new Chess(game.fen());\n          const result = gameCopy.move(randomMove);\n          if (result) {\n            console.log(\"Random move applied:\", result);\n            setGame(gameCopy);\n            setMoveHistory([...moveHistory, result.san]);\n          }\n        }\n      } catch (fallbackError) {\n        console.error(\"Failed to make fallback move:\", fallbackError);\n      }\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    console.log(\"Game over! Result:\", result);\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI (white) should make the first move\n    if (playerColor === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Toggle board orientation and player color\n  function flipBoard() {\n    const newOrientation = boardOrientation === 'white' ? 'black' : 'white';\n    setBoardOrientation(newOrientation);\n    setPlayerColor(newOrientation);\n    \n    // Reset the game when switching sides\n    const newGame = new Chess();\n    setGame(newGame);\n    setMoveHistory([]);\n    \n    // If player is now black, AI (white) should make the first move\n    if (newOrientation === 'black') {\n      setTimeout(makeAIMove, 500);\n    }\n  }\n\n  // Check if it's AI's turn when the component mounts or game state changes\n  useEffect(() => {\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Log the current game state for debugging\n    console.log(\"Game state updated:\", {\n      fen: game.fen(),\n      turn: currentTurn,\n      playerColor: playerColor,\n      isAIThinking: isAIThinking,\n      isGameOver: game.isGameOver()\n    });\n    \n    // If it's AI's turn and the game is not over\n    if (currentTurn !== playerColor && !game.isGameOver() && !isAIThinking) {\n      setTimeout(makeAIMove, 300);\n    }\n  }, [game, playerColor, isAIThinking]);\n\n  // Function to determine if a piece is draggable\n  function isDraggablePiece({ piece, sourceSquare }) {\n    // Only allow dragging pieces of the player's color\n    const pieceColor = piece.charAt(0).toLowerCase() === 'w' ? 'white' : 'black';\n    const currentTurn = game.turn() === 'w' ? 'white' : 'black';\n    \n    // Only allow dragging if it's the player's turn and the piece is of the player's color\n    return currentTurn === playerColor && pieceColor === playerColor;\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n          arePiecesDraggable={true}\n          animationDuration={200}\n          isDraggablePiece={isDraggablePiece}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={flipBoard}>Play as {boardOrientation === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"game-info\">\n        <div className=\"player-info\">\n          Playing as: <strong>{playerColor}</strong>\n        </div>\n        {isAIThinking && <div className=\"status\">AI is thinking...</div>}\n        \n        {game.isGameOver() && (\n          <div className=\"game-over\">\n            {game.isCheckmate() \n              ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n              : 'Game ended in a draw'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}