{"ast":null,"code":"var _jsxFileName = \"/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = ({\n  onGameEnd\n}) => {\n  _s();\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerSide, setPlayerSide] = useState('white'); // Player plays as white by default\n\n  // Effect to make AI move if it's AI's turn at the start\n  useEffect(() => {\n    // If game just started and player is black, let AI make first move\n    if (game.history().length === 0 && playerSide === 'black') {\n      makeAIMove();\n    }\n  }, [playerSide]);\n\n  // Function to make a move\n  function makeMove(move) {\n    const gameCopy = new Chess(game.fen());\n    try {\n      const result = gameCopy.move(move);\n      setGame(gameCopy);\n\n      // Update move history\n      if (result) {\n        setMoveHistory([...moveHistory, result.san]);\n      }\n      return result; // null if the move was invalid\n    } catch (error) {\n      console.error('Invalid move:', error);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Check if it's player's turn\n    const isWhiteTurn = game.turn() === 'w';\n    if (playerSide === 'white' && !isWhiteTurn || playerSide === 'black' && isWhiteTurn) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    // Make user move\n    const move = makeMove({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for simplicity\n    });\n\n    // If invalid move\n    if (move === null) return false;\n\n    // Check if game is over\n    if (game.isGameOver()) {\n      handleGameOver();\n      return true;\n    }\n\n    // AI makes a move\n    setTimeout(makeAIMove, 300);\n    return true;\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n    try {\n      console.log(\"Requesting AI move for position:\", game.fen());\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fen: game.fen()\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server responded with status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Received AI move data:\", data);\n\n      // Make the AI move\n      const moveResult = makeMove(data.move);\n      console.log(\"AI move result:\", moveResult);\n\n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    // Save game data\n    saveGameData(result);\n\n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result\n        })\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n\n    // If player is black, AI should make first move\n    if (playerSide === 'black') {\n      setTimeout(makeAIMove, 300);\n    }\n  }\n\n  // Toggle player side\n  function switchSides() {\n    const newSide = playerSide === 'white' ? 'black' : 'white';\n    setPlayerSide(newSide);\n    setBoardOrientation(newSide);\n\n    // If switching mid-game and it's AI's turn, make AI move\n    const isWhiteTurn = game.turn() === 'w';\n    if (newSide === 'black' && isWhiteTurn || newSide === 'white' && !isWhiteTurn) {\n      setTimeout(makeAIMove, 300);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: game.fen(),\n        onPieceDrop: onDrop,\n        boardOrientation: boardOrientation,\n        customBoardStyle: {\n          borderRadius: '5px',\n          boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchSides,\n        children: [\"Play as \", playerSide === 'white' ? 'Black' : 'White']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: [isAIThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"AI is thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"You are playing as: \", playerSide]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Current turn: \", game.turn() === 'w' ? 'White' : 'Black']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), game.isGameOver() && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: game.isCheckmate() ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` : 'Game ended in a draw'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"d+SnZuRaFVkG/kxeDi1Wp2ZYocQ=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","Chess","jsxDEV","_jsxDEV","ChessBoard","onGameEnd","_s","game","setGame","boardOrientation","setBoardOrientation","isAIThinking","setIsAIThinking","moveHistory","setMoveHistory","playerSide","setPlayerSide","history","length","makeAIMove","makeMove","move","gameCopy","fen","result","san","error","console","onDrop","sourceSquare","targetSquare","isWhiteTurn","turn","log","from","to","promotion","isGameOver","handleGameOver","setTimeout","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","moveResult","isCheckmate","saveGameData","pgn","resetGame","switchSides","newSide","className","children","position","onPieceDrop","customBoardStyle","borderRadius","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/bignola/Desktop/School/Capstone/AI-Chess-main/chess-ai-frontend/src/components/ChessBoard/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport './ChessBoard.css';\n\nconst ChessBoard = ({ onGameEnd }) => {\n  const [game, setGame] = useState(() => new Chess());\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [playerSide, setPlayerSide] = useState('white'); // Player plays as white by default\n\n  // Effect to make AI move if it's AI's turn at the start\n  useEffect(() => {\n    // If game just started and player is black, let AI make first move\n    if (game.history().length === 0 && playerSide === 'black') {\n      makeAIMove();\n    }\n  }, [playerSide]);\n\n  // Function to make a move\n  function makeMove(move) {\n    const gameCopy = new Chess(game.fen());\n    try {\n      const result = gameCopy.move(move);\n      setGame(gameCopy);\n\n      // Update move history\n      if (result) {\n        setMoveHistory([...moveHistory, result.san]);\n      }\n\n      return result; // null if the move was invalid\n    } catch (error) {\n      console.error('Invalid move:', error);\n      return null;\n    }\n  }\n\n  // Handle piece drop from user\n  function onDrop(sourceSquare, targetSquare) {\n    // Check if it's player's turn\n    const isWhiteTurn = game.turn() === 'w';\n    if ((playerSide === 'white' && !isWhiteTurn) || (playerSide === 'black' && isWhiteTurn)) {\n      console.log(\"Not your turn!\");\n      return false;\n    }\n\n    // Make user move\n    const move = makeMove({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q', // always promote to a queen for simplicity\n    });\n\n    // If invalid move\n    if (move === null) return false;\n\n    // Check if game is over\n    if (game.isGameOver()) {\n      handleGameOver();\n      return true;\n    }\n\n    // AI makes a move\n    setTimeout(makeAIMove, 300);\n    return true;\n  }\n\n  // Make AI move\n  async function makeAIMove() {\n    setIsAIThinking(true);\n\n    try {\n      console.log(\"Requesting AI move for position:\", game.fen());\n      // Call your FastAPI backend\n      const response = await fetch('http://localhost:8000/chess/get-move', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ fen: game.fen() }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server responded with status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Received AI move data:\", data);\n      \n      // Make the AI move\n      const moveResult = makeMove(data.move);\n      console.log(\"AI move result:\", moveResult);\n      \n      // Check if game is over after AI move\n      if (game.isGameOver()) {\n        handleGameOver();\n      }\n    } catch (error) {\n      console.error('Error getting AI move:', error);\n    } finally {\n      setIsAIThinking(false);\n    }\n  }\n\n  // Handle when game is over\n  function handleGameOver() {\n    let result = 'draw';\n    if (game.isCheckmate()) {\n      result = game.turn() === 'w' ? 'black' : 'white';\n    }\n\n    // Save game data\n    saveGameData(result);\n    \n    // Notify parent component\n    if (onGameEnd) {\n      onGameEnd({\n        result,\n        pgn: game.pgn(),\n        history: moveHistory,\n      });\n    }\n  }\n\n  // Save game data to backend\n  async function saveGameData(result) {\n    try {\n      await fetch('http://localhost:8000/chess/save-game', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pgn: game.pgn(),\n          result: result,\n        }),\n      });\n    } catch (error) {\n      console.error('Error saving game:', error);\n    }\n  }\n\n  // Reset the game\n  function resetGame() {\n    setGame(new Chess());\n    setMoveHistory([]);\n    \n    // If player is black, AI should make first move\n    if (playerSide === 'black') {\n      setTimeout(makeAIMove, 300);\n    }\n  }\n\n  // Toggle player side\n  function switchSides() {\n    const newSide = playerSide === 'white' ? 'black' : 'white';\n    setPlayerSide(newSide);\n    setBoardOrientation(newSide);\n    \n    // If switching mid-game and it's AI's turn, make AI move\n    const isWhiteTurn = game.turn() === 'w';\n    if ((newSide === 'black' && isWhiteTurn) || (newSide === 'white' && !isWhiteTurn)) {\n      setTimeout(makeAIMove, 300);\n    }\n  }\n\n  return (\n    <div className=\"chessboard-container\">\n      <div className=\"board\">\n        <Chessboard \n          position={game.fen()} \n          onPieceDrop={onDrop} \n          boardOrientation={boardOrientation}\n          customBoardStyle={{\n            borderRadius: '5px',\n            boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n          }}\n        />\n      </div>\n      \n      <div className=\"controls\">\n        <button onClick={resetGame}>New Game</button>\n        <button onClick={switchSides}>Play as {playerSide === 'white' ? 'Black' : 'White'}</button>\n      </div>\n      \n      <div className=\"status\">\n        {isAIThinking && <div>AI is thinking...</div>}\n        <div>You are playing as: {playerSide}</div>\n        <div>Current turn: {game.turn() === 'w' ? 'White' : 'Black'}</div>\n      </div>\n      \n      {game.isGameOver() && (\n        <div className=\"game-over\">\n          {game.isCheckmate() \n            ? `Checkmate! ${game.turn() === 'w' ? 'Black' : 'White'} wins!` \n            : 'Game ended in a draw'}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}